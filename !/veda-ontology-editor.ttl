@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix v-s: <http://semantic-machines.com/veda/veda-schema/> .
@prefix v-wf: <http://semantic-machines.com/veda/veda-workflow/> .
@prefix v-ui: <http://semantic-machines.com/veda/veda-ui/> .
@prefix td: <http://semantic-machines.com/veda/test-data/> .

@prefix v-onto: <http://semantic-machines.com/veda/veda-ontology-editor/> .
<http://semantic-machines.com/veda/veda-ontology-editor>
  rdf:type owl:Ontology ;
  rdfs:label "Veda system ontology editor"@en ;
  rdfs:label "Редактор онтологии системы Веда"@ru ;
#  owl:versionInfo "3.4" ;
  v-s:loadPriority 8 ;
.

v-s:PropertyClassModel
  rdf:type v-s:ClassModel ;
  rdfs:label "Property class model"@en ;
  rdfs:label "Модель класса Property"@ru ;
  v-ui:forClass rdf:Property ;
  v-ui:forClass owl:DatatypeProperty ;
  v-ui:forClass owl:ObjectProperty ;
  v-s:script """
    //# sourceURL=v-s:PropertyClassModel
    this.setDomain = function () {
      var domain = [];
      for (var i = 0; i < arguments.length; i++) {
        if (arguments[i] instanceof veda.IndividualModel) {
          domain.push( arguments[i] );
        } else if ( arguments[i] instanceof String ) {
          domain.push( new veda.IndividualModel( arguments[i].valueOf() ) );
        } else if ( typeof arguments[i] === "string" ) {
          domain.push( new veda.IndividualModel( arguments[i] ) );
        }
      }
      this["rdfs:domain"] = domain;
      this.save();
    }

    this.addDomain = function (_class) {
      if (_class instanceof String || typeof _class === "string" ) {
        _class = new veda.IndividualModel( _class.valueOf() );
      }
      if ( !(_class instanceof veda.IndividualModel) ) { return; }
      var filtered = this["rdfs:domain"].filter( function (domainClass) {
        return domainClass.id === _class.id;
      });
      if ( !filtered.length ) {
        this["rdfs:domain"] = this["rdfs:domain"].concat(_class);
        this.save();
      }
    };

    this.removeDomain = function (_class) {
      if (_class instanceof String || typeof _class === "string" ) {
        _class = new veda.IndividualModel( _class.valueOf() );
      }
      if ( !(_class instanceof veda.IndividualModel) ) { return; }
      this["rdfs:domain"] = this["rdfs:domain"].filter( function (domainClass) {
        return domainClass.id !== _class.id;
      });
      this.save();
    };

    this.setRange = function () {
      var range = [];
      for (var i = 0; i < arguments.length; i++) {
        if (arguments[i] instanceof veda.IndividualModel) {
          range.push( arguments[i] );
        } else if ( arguments[i] instanceof String ) {
          range.push( new veda.IndividualModel( arguments[i].valueOf() ) );
        } else if ( typeof arguments[i] === "string" ) {
          range.push( new veda.IndividualModel( arguments[i] ) );
        }
      }
      this["rdfs:range"] = range;
      this.save();
    };

    this.addRange = function (_class) {
      if (_class instanceof String || typeof _class === "string" ) {
        _class = new veda.IndividualModel( _class.valueOf() );
      }
      if ( !(_class instanceof veda.IndividualModel) ) { return; }
      var filtered = this["rdfs:range"].filter( function (rangeClass) {
        return rangeClass.id === _class.id;
      });
      if ( !filtered.length ) {
        this["rdfs:range"] = this["rdfs:range"].concat(_class);
        this.save();
      }
    };

    this.removeRange = function (_class) {
      if (_class instanceof String || typeof _class === "string" ) {
        _class = new veda.IndividualModel( _class.valueOf() );
      }
      if ( !(_class instanceof veda.IndividualModel) ) { return; }
      this["rdfs:range"] = this["rdfs:range"].filter( function (rangeClass) {
        return rangeClass.id !== _class.id;
      });
      this.save();
    };
  """ ;
.

v-s:ClassClassModel
  rdf:type v-s:ClassModel;
  rdfs:label "Class class model"@en ;
  rdfs:label "Модель класса Class"@ru ;
  v-ui:forClass owl:Class ;
  v-ui:forClass rdfs:Class ;
  v-s:script """
    //# sourceURL=v-s:ClassClassModel
    var self = this;
    this.addProperty = function (property) {
      if (property instanceof String || typeof property === "string" ) {
        property = new veda.IndividualModel( property.valueOf() );
      }
      if ( !(property instanceof veda.IndividualModel) ) { return; }
      property.addDomain(self);
      self.domainProperties[property.id] = property;
    }

    this.createProperty = function () {
      var property = new veda.IndividualModel();
      property["rdf:type"] = [ new veda.IndividualModel("rdf:Property") ];
      property.addDomain(self);
      self.domainProperties[property.id] = property;
    }

    this.isSubClassOf = function (_super) {
      if (!self.hasValue("rdfs:subClassOf")) return false;
      if (typeof _super === "string") {
        _super = new veda.IndividualModel(_super);
      }
      return self["rdfs:subClassOf"].reduce(function (acc, item) {
        return acc || (item.id === _super.id) || item.isSubClassOf(_super);
      }, false);
    }
  """ ;
.

v-s:PropertiesBundle
  rdf:type v-s:Bundle;
  rdfs:label "Properties"@en ;
  rdfs:label "Свойства"@ru ;
.
v-s:SpecificationsBundle
  rdf:type v-s:Bundle;
  rdfs:label "Specifications"@en ;
  rdfs:label "Спецификации"@ru ;
.

v-s:ClassSpec1
  rdf:type v-ui:PropertySpecification;
  v-ui:forClass owl:Class ;
  v-ui:forClass rdfs:Class ;
  v-ui:forProperty rdfs:label ;
  v-ui:minCardinality 1;
  v-ui:maxCardinality 2;
.

v-s:ClassClassTemplate
  rdf:type v-ui:ClassTemplate;
  rdfs:label "Class class template"@en ;
  rdfs:label "Шаблон класса Class"@ru ;
  v-ui:forClass owl:Class ;
  v-ui:forClass rdfs:Class ;
  v-ui:template """
  <div class="container-fluid">
    <h2><span property="rdfs:label"></span> <span class="badge" property="@"></span></h2>
    <em class="-view edit search" about="rdfs:label" property="rdfs:label"></em>
    <veda-control type="multilingualString" class="-view edit search" property="rdfs:label"></veda-control>
    <hr>
    <div class="row">
      <div class="col-md-4">
        <div class="panel panel-default">
          <div class="panel-heading">
            <h3 class="panel-title" about="v-s:PropertiesBundle" property="rdfs:label"></h3>
          </div>
          <div class="panel-body">
            <ol id="props"></ol>
          </div>
          <div class="panel-footer -view edit -search">
            <button class="btn btn-default">Создать</button>
            <button class="btn btn-default">Добавить</button>
          </div>
        </div>
      </div>
      <div class="col-md-4">
        <div class="panel panel-default">
          <div class="panel-heading">
            <h3 class="panel-title" about="v-s:SpecificationsBundle" property="rdfs:label"></h3>
          </div>
          <div class="panel-body">
            <ol id="specs"></ol>
          </div>
          <div class="panel-footer -view edit -search">
            <button class="btn btn-default">Создать</button>
            <button class="btn btn-default">Добавить</button>
          </div>
        </div>
      </div>
      <div class="col-md-4">
        <div class="panel panel-default">
          <div class="panel-heading">
            <h3 class="panel-title" about="v-ui:ClassTemplate" property="rdfs:label"></h3>
          </div>
          <div class="panel-body" id="tmpl">
          </div>
          <div class="panel-footer -view edit -search">
            <button class="btn btn-default">Создать</button>
            <button class="btn btn-default">Добавить</button>
          </div>
        </div>
      </div>
    </div>
    <div class="well well-sm">
      <button type="button" class="action btn btn-primary view -edit -search" id="edit" about="v-s:Edit" property="rdfs:label"/>
      <button type="button" class="action btn btn-success -view edit -search" id="save" about="v-s:Save" property="rdfs:label"/>
      <button type="button" class="action btn btn-default -view edit -search" id="cancel" about="v-s:Cancel" property="rdfs:label"/>
      <button type="button" class="action btn btn-link view edit -search" id="delete" about="v-s:Delete" property="rdfs:label"/>
    </div>
    <div class="modal fade" id="objModal" tabindex="-1" role="dialog">
      <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
          <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
            <h4 class="modal-title" id="myModalLabel">Modal title</h4>
          </div>
          <div class="modal-body" id="obj"></div>
        </div>
      </div>
    </div>
  </div>
  <script>
    //# sourceURL=v-s:ClassClassTemplate
    var propsContainer = $("#props", template);
    var specsContainer = $("#specs", template);
    var tmplContainer = $("#tmpl", template);
    var modal = $("#objModal", template);
    var objContainer = $("#obj", template);
    var labelTemplate = new veda.IndividualModel("v-ui:LabelLinkTemplate");
    for (var property_uri in individual.domainProperties) {
      var prop = individual.domainProperties[property_uri];
      var li = $("<li></li>").appendTo(propsContainer);
      prop.present(li, labelTemplate);
      if ( !prop.hasValue("rdfs:domain", individual) ) {
        var small = $("<small class='text-muted'></small>").appendTo(li);
        var origin = prop["rdfs:domain"].filter( function (_super) {
          return individual.isSubClassOf(_super);
        })[0];
        small.text(origin.id)
      }
    }
    for (var property_uri in individual.specsByProps) {
      var spec = individual.specsByProps[property_uri];
      var li = $("<li>").appendTo(specsContainer);
      spec.present(li, labelTemplate);
      if ( !spec.hasValue("v-ui:forClass", individual) ) {
        var small = $("<small class='text-muted'></small>").appendTo(li);
        var origin = spec["v-ui:forClass"].filter( function (_super) {
          return individual.isSubClassOf(_super);
        })[0];
        small.text(origin.id)
      }
    }
    var tmpl = individual.template;
    if (tmpl) {
      tmpl.present(tmplContainer, labelTemplate);
    }

    template.on("click", "a[href]", function (e) {
      e.preventDefault();
      var target = $(this);
      var uri = target.attr("href").split("/").pop();
      var object = new veda.IndividualModel(uri);
      objContainer.empty();
      object.present(objContainer);
      modal.modal("show");
      e.stopPropagation();
    });
  </script>
  """ ;
.

v-s:PropertyClassTemplate
  rdf:type v-ui:ClassTemplate;
  rdfs:label "Property class template"@en ;
  rdfs:label "Шаблон класса Property"@ru ;
#  v-ui:forClass rdf:Property ;
#  v-ui:forClass owl:DatatypeProperty ;
#  v-ui:forClass owl:ObjectProperty ;
  v-ui:template """
  <div property="rdfs:label"></div>
  <script>
    //# sourceURL=v-s:PropertyClassTemplate
  </script>
  """ ;
.

v-s:PropertySpecificationTemplate
  rdf:type v-ui:ClassTemplate;
  rdfs:label "Property class template"@en ;
  rdfs:label "Шаблон класса Property"@ru ;
#  v-ui:forClass v-ui:PropertySpecification ;
#  v-ui:forClass v-ui:StringPropertySpecification ;
#  v-ui:forClass v-ui:IntegerPropertySpecification ;
#  v-ui:forClass v-ui:BooleanPropertySpecification ;
#  v-ui:forClass v-ui:DecimalPropertySpecification ;
#  v-ui:forClass v-ui:DatetimePropertySpecification ;
#  v-ui:forClass v-ui:ObjectPropertySpecification ;
#  v-ui:forClass v-ui:PropertySpecification ;
  v-ui:template """
  <div property="rdfs:label"></div>
  <script>
    //# sourceURL=v-s:PropertyClassTemplate
  </script>
  """ ;
.
