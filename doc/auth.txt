Платформа Veda, server side. Авторизация.

I. Назначение полей, генерация дополнительных данных, обзор алгоритма авторизации

  1. Включение реальных людей в группы должностей (на сервере).
     1.1. При сохранении индивида класса Appointment запускается обработчик.
     1.2. Создается индивид класса принадлежность (Membership).
     1.3. Значением предиката v-s:resource устанавливается значение предиката v-s:employee из назначения.
     1.4. Значением предиката v-s:memberOf устанавливается значение предиката v-s:occupation из назначения.
     1.5. Выполняется команда put_individual для принадлежности.
     1.6. Выполнение обработчика завершается.

  2. Назначение прав автору нового индивида.

     На стороне клиента:
     2.1. При создании нового индивида, клиентское приложение дополняет индивид предикатами v-s:author, v-s:created.
     2.2. Значением предиката v-s:author устанавливается текущее (выбранное) назначение пользователя.
     2.3. Значением предиката v-s:created устанавливается текущий момент времени.
     2.4. В момент выполнения команды сохранения индивида, клиент выполняет команду put_individual.

     На стороне сервера (server js script):
     2.5. При выполнении команды (put_individual) запускается обработчик.
     2.6. Считывается предыдущее состояние записываемого индивида.
     2.7. Если предыдущего состояния не существует, то индивид считается новым, и для него необходимо установить права доступа.
          В противном случае сравниваются значения предикатов v-s:author старого и нового состояния индивида.
            Если значения совпадают, обработчик прекращает свою работу (права уже выданы ранее).
            Если значения различаются, индивид приводится к старому состоянию, выполняется команда put_individual
            (не даем подменить автора существующего объекта).
     2.8. Информация об авторе индивида извлекается из предиката v-s:author.
     2.9. Выполняется проверка соответствия пользователя от имени которого идет операция записи и назначения, указанном в предикате v-s:author.
          (Это необходимо для того, чтобы нельзя было подделать авторство индивида.)
          При выполнении проверки, uri пользователя (Person), вычисляемый из тикета, сравнивается со значением предиката v-s:employee, указанном в назначении.
            Если значения различаются, в индивид вписывается предикат v-s:deleted со значением true,
            выполнение обработчика завершается (права не назначаются, индивид никому не будет доступен).
            Если значения совпадают, создается запись авторизации (PermissionStatement).
              Значение предиката v-s:subject устанавливается равным значению v-s:occupation из назначения (должность).
              Значение предиката v-s:object устанавливается равным uri создаваемого субъекта.
              Значение предиката v-s:canCreate, v-s:canRead, v-s:canUpdate, v-s:canDelete устанавливается равным true.
              Выполняется команда put_individual для записи авторизации.
              Выполнение обработчика завершается.

  3. Авторизация доступа к индивиду.
     При выполнении проверки прав доступа (на сервере).
     3.1. По тикету вычисляется пользователь.
     3.2. Производится извлечение всех групп, в которых состоит пользователь, с учетом вложенности групп друг в друга.
     3.3. Производится извлечение всех групп, в которых состоит запрашиваемый ресурс, с учетом вложенности групп друг в друга.
     3.4. Производится извлечение подходящих записей авторизации, в которых есть группа пользователя и группа ресурса с
            необходимым уровнем прав и вычисление прав с учетом ограничений установленных в группах.

II. Структуры хранения данных авторизации

  Для хранения авторизационных данных применяются индивиды трех видов:

  1. v-s:Group : группа для идентификации подмножества ресурсов.

  2. v-s:Membership : запись о вхождении индивида [v-s:resource] в группу [v-s:memberOf].
     Допускается вложение групп в группы, при этом поля [v-s:canCreate, v-s:canDelete, v-s:canRead, v-s:canUpdate], ограничивают права для вложенных групп.

  3. v-s:PermissionStatement : запись связывающая субъекта авторизации [v-s:permissionSubject],
     объекта авторизации [v-s:permissionObject] правами [v-s:canCreate, v-s:canDelete, v-s:canRead, v-s:canUpdate],
     при этом субъектом и объектом авторизации могут выступать как индивиды типа v-s:Person, так и группы

  Для быстрого извлечения авторизационных данных, на сервере, в отдельной базе формируются индексы:

  1. Индекс формируемый из субъекта типа v-s:Membership
     * Ключ индекса совпадает с ключом ресурса + "_m".
     * В записи присутствуют только те группы, в которые ресурс входит непосредственно (есть субъект Membership).

     Пример записи membership:
     object_uri_m : {
       object_group_uri1 : 2, // R
       object_group_uri2 : 2, // R
       object_group_uri3 : 15 // CRUD
     }
     * Уровень прав вхождения в группу по-умолчанию считается равным CRUD.

  2. Индекс формируемый из субъектов типа v-s:PermissionStatement
     * Ключ индекса permission совпадает с ключом ресурса + "_p".
     * В записи присутствуют только те разрешения, которые были выданы непосредственно на этот ресурс (есть субъект PermissionStatement).

     Пример записи permission:
     object_uri_p : {
       subject_group_uri1 : 2,  // R
       subject_group_uri2 : 2,  // R
       subject_group_uri3 : 15  // CRUD
     }

III. Алгоритм вычисления права доступа, используя предпостроенные индексы:

  object - объект доступа
  subject - субъект доступа

  1. Получаем цепочки всех групп объекта, запрашивая записи membership по сформированному uri:  object_uri + "_m".
  При этом, если в цепочке принадлежностей был указан уровень прав, этим же уровнем помечаются все группы далее по цепочке.
  Поскольку уровень прав одних и тех же групп в разных цепочках иерархии может отличаться,
  формируем общий хэш групп объекта с указанием для каждой группы всех уровней прав из разных цепочек (object_groups).
  В общий хэш групп объекта включаем сам объект.

  Пример:
  object_groups = {
    // включаем сам объект
    object_uri: [ 15 ],           // [ CRUD ]
    object_group_uri1: [ 2, 15 ], // [ R, CRUD ]
    object_group_uri2: [ 2 ],     // [ R ]
    object_group_uri3: [ 2 ],     // [ R ]
  }

  2. Получаем цепочки всех групп субъекта (пользователя).
  Формируем общий хэш групп, в которые входит субъект (персона). Операция аналогична п.1.
  В общий список групп субъекта включаем сам субъект.

  Пример:
  subject_groups = {
    // включаем сам субъект
    subject_uri : [ 15 ],
    subject_group_uri1 : [ 15 ],
    subject_group_uri2 : [ 15 ],
    subject_group_uri3 : [ 15 ]
  }

  3. Для каждого ключа obj_key хэша objects_groups извлекаем запись permission по сформированному uri:  obj_key + "_p".

  Пример:
  object_uri_p : {
    subject_group_uri3 : 15 // CRUD
  }

  4. Для каждого ключа perm_key в хэше permission проверяем, есть ли такой ключ в хэше subject_groups.
  При наличии ключа выполняем операцию побитового "И" каждого значения из списка object_groups[obj_key] со значением permission[perm_key],
  а потом с запрашиваемым уровнем прав.
  Если итог выполнения операции не 0, прекращаем обработку - запрашиваемое право подтверждено.

  * Для оптимизации количества обращений к базе данных используем вытесняющий кэш (с учетом частоты запроса конкретного элемента!) для записей membership и permission.
  * После некоторого времени, за счет использования вытесняющего кэша, количество обращений к базе данных резко сократится,
    поскольку в него войдут группы объектов высокого уровня и их разрешения (например, классы и группы орг. структуры).
  * Дополнительно можно хранить в памяти предпостроенные цепочки групп ресурсов из кэша (для ускорения вычисления object_groups, subject_groups).

VI. Пример реализации алгоритма вычисления права доступа, используя предпостроенные индексы на javascript:

// AUTHORIZATION

var C = 1,
    R = 2,
    U = 4,
    D = 8;

var admin_ticket = _get_admin_ticket();

// MAIN FUNCTION

function authorize(subject_uri, object_uri, right) {

  var object_groups = get_resource_groups(object_uri),
      subject_groups = get_resource_groups(subject_uri);

  for (var obj_key in object_groups) {

    var permissions = get_permissions(obj_key);

    for (var perm_key in permissions) {

      if (perm_key in subject_groups) {

        var list = object_groups[obj_key],
          length = list.length;

        for (var i = 0; i < length; i++ ) {
          if ( (list[i] & permissions[perm_key]) & right ) {
            return true;
          }
        }

      }
    }

  }
  return false;
}

// UTILS

function get_permissions(resource_uri) {

  return _get_individual(admin_ticket, resource_uri + "_p");

}

function get_resource_groups(resource_uri) {

  var result = {};
  result[resource_uri] = [C|R|U|D];
  return _get_resource_groups(resource_uri, result, C|R|U|D);

}

function _get_resource_groups(resource_uri, acc, rights) {

  if (resource_uri === "v-s:AllResourcesGroup") return;

  var membership_uri = resource_uri + "_m",
    membership = _get_individual(admin_ticket, membership_uri);

  if (!membership) return;

  for (var key in membership) {
    acc[key] = acc[key] || [];
    rights = membership[key] & rights;
    acc[key].push( rights );
    _get_resource_groups(key, acc, rights);
  }

  return acc;
}

// TEST DATA

function _get_admin_ticket() {
  return 1;
}

function _get_individual(ticket, uri) {

  get_count++;

  get_stats[uri] = get_stats[uri] ? ++get_stats[uri] : 1;

  var result;

  switch (uri) {

    // objects memberships
    case "add1_m" :
      result = {
        "v-s:AllResourcesGroup" : C|R|U|D,
        "im1": C|R|U|D
      }; break;
    case "ver1_m" :
      result = {
        "v-s:AllResourcesGroup" : C|R|U|D,
        "im1": R
      }; break;
    case "im1_m" :
      result = {
        "v-s:AllResourcesGroup" : C|R|U|D,
        "imc": C|R|U|D
      }; break;
    case "imc_m" :
      result = {
        "v-s:AllResourcesGroup" : C|R|U|D,
        "doc": C|R|U|D
      }; break;
    case "doc_m" :
      result = {
        "v-s:AllResourcesGroup" : C|R|U|D
      }; break;

    // subjects memberships
    case "p1_m" :
      result = {
        "v-s:AllResourcesGroup" : C|R|U|D,
        "pg1" : C|R|U|D,
        "pg2" : C|R|U|D
      }; break;
    case "pg1_m" :
      result = {
        "v-s:AllResourcesGroup" : C|R|U|D,
        "mnd" : C|R|U|D
      }; break;
    case "pg2_m" :
      result = {
        "v-s:AllResourcesGroup" : C|R|U|D,
        "mnd" : C|R|U|D
      }; break;
    case "mnd_m" :
      result = {
        "v-s:AllResourcesGroup" : C|R|U|D
      }; break;

    // object permissions
    case "im1_p" :
      result = {
        "p1" : C|R|U
      }; break;
    /*case "imc_p" :
      result = {
        "mnd" : R
      }; break;
    case "doc_p" :
      result = {
        "mnd" : C|R|U
      }; break;
    case "ver1_p" :
      result = {
        "p1" : C|R|U|D
      }; break;
    */
  }

  return result;
}


// TEST

var get_count = 0;
var get_stats = {};

// p1 -> im1
get_count = 0;
console.log("authorize('p1', 'im1', C)", authorize('p1', 'im1', C), "get_count", get_count);
get_count = 0;
console.log("authorize('p1', 'im1', R)", authorize('p1', 'im1', R), "get_count", get_count);
get_count = 0;
console.log("authorize('p1', 'im1', U)", authorize('p1', 'im1', U), "get_count", get_count);
get_count = 0;
console.log("authorize('p1', 'im1', D)", authorize('p1', 'im1', D), "get_count", get_count);

// p1 -> add1
get_count = 0;
console.log("authorize('p1', 'add1', C)", authorize('p1', 'add1', C), "get_count", get_count);
get_count = 0;
console.log("authorize('p1', 'add1', R)", authorize('p1', 'add1', R), "get_count", get_count);
get_count = 0;
console.log("authorize('p1', 'add1', U)", authorize('p1', 'add1', U), "get_count", get_count);
get_count = 0;
console.log("authorize('p1', 'add1', D)", authorize('p1', 'add1', D), "get_count", get_count);

// p1 -> ver1
get_count = 0;
console.log("authorize('p1', 'ver1', C)", authorize('p1', 'ver1', C), "get_count", get_count);
get_count = 0;
console.log("authorize('p1', 'ver1', R)", authorize('p1', 'ver1', R), "get_count", get_count);
get_count = 0;
console.log("authorize('p1', 'ver1', U)", authorize('p1', 'ver1', U), "get_count", get_count);
get_count = 0;
console.log("authorize('p1', 'ver1', D)", authorize('p1', 'ver1', D), "get_count", get_count);

console.log("get_stats", get_stats);

