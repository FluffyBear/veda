Для рассмотрения примера с разветвлением нужно создать более сложную
сеть. Первым шагом добавим задание и сделаем его XOR разветвлением
(xor-fork1.png). Добавим два простых задания и соединим сеть потоком
(xor-fork2.png).

Для работы нам будут необходимы три переменные docid, tag, initiator.
Получим их с помощью следующей трансформации:

:test-tr1
    rdf:type v-wf:Transform ;
    rdfs:label "пробная трансформация"^^xsd:string;
    v-wf:transformRule :test-tr1-rule-initiator, :test-tr2-rule-docid, :test-tr3-rule-tag;
.

:test-tr1-rule-initiator
  rdf:type v-wf:Rule ;
  v-wf:aggregate "putUri ('rdf:type', 'v-wf:Variable')"^^xsd:string;
  v-wf:aggregate "putValue ('v-wf:variableValue')"^^xsd:string;
  v-wf:aggregate "putString ('v-wf:variableName', 'initiator')"^^xsd:string;
  v-wf:segregateElement "contentName('v-s:creator')" ;
.

:test-tr2-rule-docid
  rdf:type v-wf:Rule ;
  v-wf:aggregate "putUri ('rdf:type', 'v-wf:Variable')"^^xsd:string;
  v-wf:aggregate "putValue ('v-wf:variableValue')"^^xsd:string;
  v-wf:aggregate "putString ('v-wf:variableName', 'docid')"^^xsd:string;
  v-wf:segregateElement "contentName('@')" ;
.

:test-tr3-rule-tag
  rdf:type v-wf:Rule ;
  v-wf:aggregate "putUri ('rdf:type', 'v-wf:Variable')"^^xsd:string;
  v-wf:aggregate "putValue ('v-wf:variableValue')"^^xsd:string;
  v-wf:aggregate "putString ('v-wf:variableName', 'tag')"^^xsd:string;
  v-wf:segregateElement "contentName('v-s:tag')" ;
.

Теперь необходимо описать условный переход для потока, для этого 
необходимо описать предекат потока. Выделив, стрелку заполним
это поле выражением getFirstValue( process.getInputVariable ('tag')) == 'tag1'
для потока в направлении Task1 (xor-fork3.png). Похожим выражением
getFirstValue( process.getInputVariable ('tag')) == 'tag2' заполним
предекат потока в направлении Task2.

Для Task1 наобходимы два стартовых преобразования для
определения локальных переменных:

:test-map-docid
  rdfs:label "Маппинг docid"@ru;
  rdf:type v-wf:Mapping ;
  v-wf:mapToVariable d:var_docid ;
  v-wf:mappingExpression  "process.getInputVariable ('docid')" ;
  rdfs:isDefinedBy s-wf: ;
.

:test-map-initiator
  rdfs:label "Маппинг initiator"@ru;
  rdf:type v-wf:Mapping ;
  v-wf:mapToVariable d:var_initiator ;
  v-wf:mappingExpression  "process.getInputVariable ('initiator')" ;
  rdfs:isDefinedBy s-wf: ;
.

d:var_docid
  rdf:type v-wf:VarDefine ;
  v-wf:varDefineName "src_uri" ;
  rdfs:label "src_uri" ;
  v-wf:varDefineScope v-wf:Net ;
.

d:var_initiator
  rdf:type v-wf:VarDefine ;
  v-wf:varDefineName "value" ;
  rdfs:label "value" ;
  v-wf:varDefineScope v-wf:Net ;
.

Добавим их в поле "стартовое преобразование". Для того чтобы
найти интересующее нас преобразование можно ввести
часть rdfs:label (xor-fork4.png). name_uri создадим вручную
для этого нужно дважды кликнуть по прямоугольнику задания,
после этого появится всплывающее окно в котором мы можем создать
name_uri (xor-fork5.png), после заполения поля нажимаем
кнопку сохранить и переходим к добавлению исполнителя задачи.
Для автоматического выполнения добавим кодлет add_value_to_document
(xor-fork6.png). Для Task2 подобных действий выполнять не будем.

Перейдём к созданию стартовой формы. Выберем нашу сеть, и
в поле "использовать перобразование" укажем наше преобразование.
В условии разветвления используется значение из поля "ключевые слова",
запишем в нём tag1. Запустим процесс. Видим, что маршрут пошёл по
ветви с условием на tag1.



