# baseURI: http://semantic-machines.com/veda/mondi-workflow
# imports: http://semantic-machines.com/veda/veda-workflow

# c14n-version: 3
@prefix mnd-wf: <http://semantic-machines.com/veda/mondi-workflow/> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix v-wf: <http://semantic-machines.com/veda/veda-workflow/> .

<http://semantic-machines.com/veda/mondi-workflow>
  rdf:type owl:Ontology ;
  owl:imports <http://semantic-machines.com/veda/veda-workflow> ;
  owl:versionInfo "1.0" ;
  rdfs:label "Mondi workflow ontology"@en ;
  rdfs:label "Онтология бизнес процессов Монди"@ru ;
.
# --- begin ----------------------- NET Complex Route --------------------------------------- #
mnd-wf:net_complex_route
        rdf:type v-wf:Net ;
	v-wf:inputVariable mnd-wf:var_doc_id ;
	v-wf:inputVariable mnd-wf:var_initiator ;
	v-wf:inputVariable mnd-wf:var_agreed_1 ;
	v-wf:inputVariable mnd-wf:var_agreed_2 ;
	v-wf:inputVariable mnd-wf:var_agreed_3 ;
	v-wf:inputVariable mnd-wf:var_signer_1 ;
	v-wf:inputVariable mnd-wf:var_reviewer_1 ;
	v-wf:localVariable mnd-wf:var_right_1 ;
        rdfs:label "Complex route"@en ;
        rdfs:label "Комплексный маршрут"@ru ;
.
mnd-wf:var_initiator
        rdf:type v-wf:Variable ;
	v-wf:variableName "initiator" ;
.
mnd-wf:var_doc_id
        rdf:type v-wf:Variable ;
	v-wf:variableName "docId" ;
.
mnd-wf:var_agreed_1
        rdf:type v-wf:Variable ;
	v-wf:variableName "agreedLevel1" ;
.
mnd-wf:var_agreed_2
        rdf:type v-wf:Variable ;
	v-wf:variableName "agreedLevel2" ;
.
mnd-wf:var_agreed_3
        rdf:type v-wf:Variable ;
	v-wf:variableName "agreedLevel3" ;
.
mnd-wf:var_signer_1
        rdf:type v-wf:Variable ;
	v-wf:variableName "signer" ;
.
mnd-wf:var_reviewer_1
        rdf:type v-wf:Variable ;
	v-wf:variableName "reviewer" ;
.
mnd-wf:var_right_1
        rdf:type v-wf:Variable ;
	v-wf:variableName "originalRight" ;
.
# ------------------------------- NET Complex Route : Input Condition ----------------------------- #
mnd-wf:ic1 
	rdf:type v-wf:InputCondition ;
	v-wf:belongsTo mnd-wf:net_complex_route ;
	v-wf:locationX 12 ;
	v-wf:locationY 512 ;
.
mnd-wf:f_ic1_t1
	rdf:type v-wf:Flow ;
	v-wf:belongsTo mnd-wf:net_complex_route ;
	v-wf:flowsInto mnd-wf:t1 ;
.	
# ------------------------------- NET Complex Route : task "Проверить, запущен ли?" ---------------- #
mnd-wf:t1 
	rdf:type v-wf:Task ;
	rdfs:label "Проверить, запущен ли?" ;
	v-wf:executor mnd-wf:codelet_is_run ;
	v-wf:belongsTo mnd-wf:net_complex_route ;
	v-wf:hasFlow mnd-wf:f_t1_t2 ;
	v-wf:hasFlow mnd-wf:f_t1_oc1 ;
	v-wf:split v-wf:XOR ;	
	v-wf:inputVariable mnd-wf:var_doc_id_t1 ;
	v-wf:startingMapping mnd-wf:map_task_1_b ;
	v-wf:locationX 84 ;
	v-wf:locationY 512 ;
.
mnd-wf:var_doc_id_t1
        rdf:type v-wf:Variable ;
	v-wf:variableName "docId" ;
.
mnd-wf:map_task_1_b
	rdf:type v-wf:Mapping ;
	v-wf:mapsTo mnd-wf:var_doc_id_t1 ;	
	v-wf:mappingExpression	"net.getVariableValue ('doc_id')" ;
.
mnd-wf:f_t1_oc1
	rdf:type v-wf:Flow ;
	v-wf:belongsTo mnd-wf:net_complex_route ;
	v-wf:flowsInto mnd-wf:oc1 ;
	v-wf:predicate "true () ";
.	
mnd-wf:f_t1_t2
	rdf:type v-wf:Flow ;
	v-wf:belongsTo mnd-wf:net_complex_route ;
	v-wf:flowsInto mnd-wf:t2 ;
	v-wf:predicate "false ()" ;
.	
# ------------------------------- NET Complex Route : task "понизить права" ------------------------- #
mnd-wf:t2 
	rdf:type v-wf:Task ;
	rdfs:label "понизить права" ;
	v-wf:executor mnd-wf:codelet_down_right ;
	v-wf:belongsTo mnd-wf:net_complex_route ;
	v-wf:hasFlow mnd-wf:f_t1_oc1 ;
	v-wf:inputVariable mnd-wf:var_doc_id_t2 ;
	v-wf:outputVariable mnd-wf:var_t2_rights ;
	v-wf:startingMapping mnd-wf:map_t2_b ;
	v-wf:completedMapping mnd-wf:map_t2_e ;
	v-wf:locationX 120 ;
	v-wf:locationY 348 ;
.
mnd-wf:var_doc_id_t2
        rdf:type v-wf:Variable ;
	v-wf:variableName "docId" ;
.
mnd-wf:var_t2_rights
        rdf:type v-wf:Variable ;
	v-wf:variableName "rights" ;
.
mnd-wf:map_t2_b
	rdf:type v-wf:Mapping ;
	v-wf:mapsTo mnd-wf:var_doc_id_t2 ;	
	v-wf:mappingExpression	"net.getVariableValue ('docId')" ;
.
mnd-wf:map_t2_e
	rdf:type v-wf:Mapping ;
	v-wf:mapsTo mnd-wf:var_right_1 ;	
	v-wf:mappingExpression	"task.getVariableValue ('rights')" ;
.
mnd-wf:f_t2_c1
	rdf:type v-wf:Flow ;
	v-wf:belongsTo mnd-wf:net_complex_route ;
	v-wf:flowsInto mnd-wf:c1 ;
.	
# ------------------------------- NET Complex Route : condition 1 ---------------------------------- #
mnd-wf:c1
	rdf:type v-wf:Condition ;
	v-wf:belongsTo mnd-wf:net_complex_route ;
	v-wf:locationX 200 ;
	v-wf:locationY 348 ;
.
mnd-wf:f_c1_t3
	rdf:type v-wf:Flow ;
	v-wf:belongsTo mnd-wf:net_complex_route ;
	v-wf:flowsInto mnd-wf:t3 ;
.	
# ------------------------------- NET Complex Route : condition 2 ---------------------------------- #
mnd-wf:c2
	rdf:type v-wf:Condition ;
	v-wf:belongsTo mnd-wf:net_complex_route ;
	v-wf:locationX 420 ;
	v-wf:locationY 76 ;
.
mnd-wf:f_c2_t8
	rdf:type v-wf:Flow ;
	v-wf:belongsTo mnd-wf:net_complex_route ;
	v-wf:flowsInto mnd-wf:t8 ;
.	
# ------------------------------- NET Complex Route : task "Согласование 1" ------------------------ #
mnd-wf:t3
	rdf:type v-wf:Task ;
	v-wf:belongsTo mnd-wf:net_complex_route ;
	rdfs:label "Согласование 1" ;
	v-wf:executor mnd-wf:executor_def_1 ;
	v-wf:subNet mnd-wf:net_agree;
	v-wf:locationX 272 ;
	v-wf:locationY 332 ;
	v-wf:hasFlow mnd-wf:f_t3_c2 ;
	v-wf:hasFlow mnd-wf:f_t3_t4 ;
	v-wf:split v-wf:XOR ;	
	v-wf:inputVariable mnd-wf:var_doc_id_t3 ;
	v-wf:outputVariable mnd-wf:var_t3_res ;
	v-wf:startingMapping mnd-wf:map_t3_b ;
.
mnd-wf:var_doc_id_t3
        rdf:type v-wf:Variable ;
	v-wf:variableName "docId" ;
.
mnd-wf:var_t3_res
        rdf:type v-wf:Variable ;
	v-wf:variableName "result" ;
.
mnd-wf:map_t3_b
	rdf:type v-wf:Mapping ;
	v-wf:mapsTo mnd-wf:var_doc_id_t3 ;	
	v-wf:mappingExpression	"net.getVariableValue ('docId')" ;
.
mnd-wf:executor_def_1
	rdf:type v-wf:ExecutorDefinition ;
	v-s:scipt "net.getVariableValue ('agreedLevel1')" ;
.
mnd-wf:f_t3_c2
	rdf:type v-wf:Flow ;
	v-wf:belongsTo mnd-wf:net_complex_route ;
	v-wf:flowsInto mnd-wf:c2 ;
	v-wf:predicate "eval (net.result == false)";
.	
mnd-wf:f_t3_t4
	rdf:type v-wf:Flow ;
	v-wf:belongsTo mnd-wf:net_complex_route ;
	v-wf:flowsInto mnd-wf:t4 ;
	v-wf:predicate "eval (net.result == true)" ;
.
# ------------------------------- NET Complex Route : task "Согласование 2" ------------------------ #
mnd-wf:t4
	rdf:type v-wf:Task ;
	v-wf:belongsTo mnd-wf:net_complex_route ;
	rdfs:label "Согласование 2" ;
	v-wf:executor mnd-wf:executor_def_2 ;
	v-wf:subNet mnd-wf:net_agree;
	v-wf:locationX 368 ;
	v-wf:locationY 308 ;
	v-wf:hasFlow mnd-wf:f_t4_c2 ;
	v-wf:hasFlow mnd-wf:f_t4_t5 ;
	v-wf:split v-wf:XOR ;	
	v-wf:inputVariable mnd-wf:var_doc_id_t4 ;
	v-wf:outputVariable mnd-wf:var_t4_res ;
	v-wf:startingMapping mnd-wf:map_t4_b ;
.
mnd-wf:var_doc_id_t4
        rdf:type v-wf:Variable ;
	v-wf:variableName "docId" ;
.
mnd-wf:var_t4_res
        rdf:type v-wf:Variable ;
	v-wf:variableName "result" ;
.
mnd-wf:map_t4_b
	rdf:type v-wf:Mapping ;
	v-wf:mapsTo mnd-wf:var_doc_id_t4 ;	
	v-wf:mappingExpression	"net.getVariableValue ('docId')" ;
.
mnd-wf:executor_def_2
	rdf:type v-wf:ExecutorDefinition ;
	v-s:scipt "net.getVariableValue ('agreedLevel2')" ;
.
mnd-wf:f_t4_c2
	rdf:type v-wf:Flow ;
	v-wf:belongsTo mnd-wf:net_complex_route ;
	v-wf:flowsInto mnd-wf:c2 ;
	v-wf:predicate "eval (net.result == false)";
.	
mnd-wf:f_t4_t5
	rdf:type v-wf:Flow ;
	v-wf:belongsTo mnd-wf:net_complex_route ;
	v-wf:flowsInto mnd-wf:t5 ;
	v-wf:predicate "eval (net.result == true)" ;
.
# ------------------------------- NET Complex Route : task "Согласование 3" ------------------------ #
mnd-wf:t5
	rdf:type v-wf:Task ;
	v-wf:belongsTo mnd-wf:net_complex_route ;
	rdfs:label "Согласование 3" ;
	v-wf:executor mnd-wf:executor_def_3 ;
	v-wf:subNet mnd-wf:net_agree;
	v-wf:locationX 452 ;
	v-wf:locationY 284 ;
	v-wf:hasFlow mnd-wf:f_t5_c2 ;
	v-wf:hasFlow mnd-wf:f_t5_t6 ;
	v-wf:split v-wf:XOR ;	
	v-wf:inputVariable mnd-wf:var_doc_id_t5 ;
	v-wf:outputVariable mnd-wf:var_t5_res ;
	v-wf:startingMapping mnd-wf:map_t5_b ;
.
mnd-wf:var_doc_id_t5
        rdf:type v-wf:Variable ;
	v-wf:variableName "docId" ;
.
mnd-wf:var_t5_res
        rdf:type v-wf:Variable ;
	v-wf:variableName "result" ;
.
mnd-wf:map_t5_b
	rdf:type v-wf:Mapping ;
	v-wf:mapsTo mnd-wf:var_doc_id_t5 ;	
	v-wf:mappingExpression	"net.getVariableValue ('docId')" ;
.
mnd-wf:executor_def_3
	rdf:type v-wf:ExecutorDefinition ;
	v-s:scipt "net.getVariableValue ('agreedLevel3')" ;
.
mnd-wf:f_t5_c2
	rdf:type v-wf:Flow ;
	v-wf:belongsTo mnd-wf:net_complex_route ;
	v-wf:flowsInto mnd-wf:c2 ;
	v-wf:predicate "eval (net.result == false)";
.	
mnd-wf:f_t5_t6
	rdf:type v-wf:Flow ;
	v-wf:belongsTo mnd-wf:net_complex_route ;
	v-wf:flowsInto mnd-wf:t6 ;
	v-wf:predicate "eval (net.result == true)" ;
.
# ------------------------------- NET Complex Route : task "Подписание" ------------------------ #
mnd-wf:t6
	rdf:type v-wf:Task ;
	v-wf:belongsTo mnd-wf:net_complex_route ;
	rdfs:label "Подписание" ;
	v-wf:executor mnd-wf:executor_def_4 ;
	v-wf:subNet mnd-wf:net_sing;
	v-wf:locationX 572 ;
	v-wf:locationY 280 ;
	v-wf:hasFlow mnd-wf:f_t6_c2 ;
	v-wf:hasFlow mnd-wf:f_t6_t7 ;
	v-wf:split v-wf:XOR ;	
	v-wf:inputVariable mnd-wf:var_doc_id_t6 ;
	v-wf:outputVariable mnd-wf:var_t6_res ;
	v-wf:startingMapping mnd-wf:map_t6_b ;
.
mnd-wf:var_doc_id_t6
        rdf:type v-wf:Variable ;
	v-wf:variableName "docId" ;
.
mnd-wf:var_t6_res
        rdf:type v-wf:Variable ;
	v-wf:variableName "result" ;
.
mnd-wf:map_t6_b
	rdf:type v-wf:Mapping ;
	v-wf:mapsTo mnd-wf:var_doc_id_t6 ;	
	v-wf:mappingExpression	"net.getVariableValue ('docId')" ;
.
mnd-wf:executor_def_4
	rdf:type v-wf:ExecutorDefinition ;
	v-s:scipt "net.getVariableValue ('reviewer')" ;
.
mnd-wf:f_t6_c2
	rdf:type v-wf:Flow ;
	v-wf:belongsTo mnd-wf:net_complex_route ;
	v-wf:flowsInto mnd-wf:c2 ;
	v-wf:predicate "eval (net.result == false)";
.	
mnd-wf:f_t6_t7
	rdf:type v-wf:Flow ;
	v-wf:belongsTo mnd-wf:net_complex_route ;
	v-wf:flowsInto mnd-wf:t7 ;
	v-wf:predicate "eval (net.result == true)" ;
.
# ------------------------------- NET Complex Route : task "Рассмотрение" ------------------------ #
mnd-wf:t7
	rdf:type v-wf:Task ;
	v-wf:belongsTo mnd-wf:net_complex_route ;
	rdfs:label "Рассмотрение" ;
	v-wf:executor mnd-wf:executor_def_5 ;
	v-wf:subNet mnd-wf:net_review;
	v-wf:locationX 680 ;
	v-wf:locationY 288 ;
	v-wf:hasFlow mnd-wf:f_t7_c2 ;
	v-wf:hasFlow mnd-wf:f_t7_t8 ;
	v-wf:split v-wf:XOR ;	
	v-wf:inputVariable mnd-wf:var_doc_id_t7 ;
	v-wf:outputVariable mnd-wf:var_t7_res ;
	v-wf:startingMapping mnd-wf:map_t7_b ;
.
mnd-wf:var_doc_id_t7
        rdf:type v-wf:Variable ;
	v-wf:variableName "docId" ;
.
mnd-wf:var_t7_res
        rdf:type v-wf:Variable ;
	v-wf:variableName "result" ;
.
mnd-wf:map_t7_b
	rdf:type v-wf:Mapping ;
	v-wf:mapsTo mnd-wf:var_doc_id_t7 ;	
	v-wf:mappingExpression	"net.getVariableValue ('docId')" ;
.
mnd-wf:executor_def_5
	rdf:type v-wf:ExecutorDefinition ;
	v-s:scipt "net.getVariableValue ('reviewer')" ;
.
mnd-wf:f_t7_c2
	rdf:type v-wf:Flow ;
	v-wf:belongsTo mnd-wf:net_complex_route ;
	v-wf:flowsInto mnd-wf:c2 ;
	v-wf:predicate "eval (net.result == false)";
.	
mnd-wf:f_t7_c3
	rdf:type v-wf:Flow ;
	v-wf:belongsTo mnd-wf:net_complex_route ;
	v-wf:flowsInto mnd-wf:c3 ;
	v-wf:predicate "eval (net.result == true)" ;
.
# ------------------------------- NET Complex Route : task "Доработать" ------------------------ #
mnd-wf:t8
	rdf:type v-wf:Task ;
	v-wf:belongsTo mnd-wf:net_complex_route ;
	rdfs:label "Доработать" ;
	v-wf:executor mnd-wf:executor_def_6 ;
	v-wf:subNet mnd-wf:net_review;
	v-wf:locationX 180 ;
	v-wf:locationY 208 ;
	v-wf:hasFlow mnd-wf:f_t8_c1 ;
	v-wf:hasFlow mnd-wf:f_t8_t3 ;
	v-wf:split v-wf:XOR ;	
	v-wf:inputVariable mnd-wf:var_doc_id_t8 ;
	v-wf:outputVariable mnd-wf:var_t8_res ;
	v-wf:startingMapping mnd-wf:map_t8_b ;
.
mnd-wf:var_doc_id_t8
        rdf:type v-wf:Variable ;
	v-wf:variableName "docId" ;
.
mnd-wf:var_t8_res
        rdf:type v-wf:Variable ;
	v-wf:variableName "result" ;
.
mnd-wf:map_t8_b
	rdf:type v-wf:Mapping ;
	v-wf:mapsTo mnd-wf:var_doc_id_t8 ;	
	v-wf:mappingExpression	"net.getVariableValue ('docId')" ;
.
mnd-wf:executor_def_5
	rdf:type v-wf:ExecutorDefinition ;
	v-s:scipt "net.getVariableValue ('initiator')" ;
.
mnd-wf:f_t8_c3
	rdf:type v-wf:Flow ;
	v-wf:belongsTo mnd-wf:net_complex_route ;
	v-wf:flowsInto mnd-wf:c3 ;
	v-wf:predicate "eval (net.result == false)";
.	
mnd-wf:f_t8_c1
	rdf:type v-wf:Flow ;
	v-wf:belongsTo mnd-wf:net_complex_route ;
	v-wf:flowsInto mnd-wf:c1 ;
	v-wf:predicate "eval (net.result == true)" ;
.
# ------------------------------- NET Complex Route : condition 3 ---------------------------------- #
mnd-wf:c3
	rdf:type v-wf:Condition ;
	v-wf:belongsTo mnd-wf:net_complex_route ;
	v-wf:locationX 800 ;
	v-wf:locationY 296 ;
.
mnd-wf:f_c3_t9
	rdf:type v-wf:Flow ;
	v-wf:belongsTo mnd-wf:net_complex_route ;
	v-wf:flowsInto mnd-wf:t9 ;
.
# ------------------------------- NET Complex Route : task "восстановить права" ------------------------ #
mnd-wf:t9
	rdf:type v-wf:Task ;
	v-wf:belongsTo mnd-wf:net_complex_route ;
	rdfs:label "восстановить права" ;
	v-wf:executor mnd-wf:codelet_restore_right ;
	v-wf:subNet mnd-wf:net_review;
	v-wf:locationX 882 ;
	v-wf:locationY 296 ;
	v-wf:hasFlow mnd-wf:f_t9_oc1 ;
	v-wf:inputVariable mnd-wf:var_doc_id_t9 ;
	v-wf:inputVariable mnd-wf:var_t9_right ;
	v-wf:startingMapping mnd-wf:map_t9_b1 ;
	v-wf:startingMapping mnd-wf:map_t9_b2 ;
.
mnd-wf:var_doc_id_t9
        rdf:type v-wf:Variable ;
	v-wf:variableName "docId" ;
.
mnd-wf:var_t9_right
        rdf:type v-wf:Variable ;
	v-wf:variableName "originalRight" ;
.
mnd-wf:map_t9_b1
	rdf:type v-wf:Mapping ;
	v-wf:mapsTo mnd-wf:var_doc_id_t9 ;	
	v-wf:mappingExpression	"net.getVariableValue ('docId')" ;
.
mnd-wf:map_t9_b2
	rdf:type v-wf:Mapping ;
	v-wf:mapsTo mnd-wf:var_t9_right ;	
	v-wf:mappingExpression	"net.getVariableValue ('originalRight')" ;
.
mnd-wf:f_t9_oc1
	rdf:type v-wf:Flow ;
	v-wf:belongsTo mnd-wf:net_complex_route ;
	v-wf:flowsInto mnd-wf:oc1 ;
.	
# ------------------------------- NET Complex Route : Output Condition ---------------------------- #
mnd-wf:oc1 
	rdf:type v-wf:OutputCondition ;
	v-wf:belongsTo mnd-wf:net_complex_route ;
	v-wf:locationX 992 ;
	v-wf:locationY 324 ;
.		
# --- end -------------------------- NET Complex Route ----------------------------------- end ---- #

# ------------------------------- NET Agree --------------------------------------------------------- #
mnd-wf:net_agree
        rdf:type v-wf:Net ;
	v-wf:inputVariable mnd-wf:var_doc_id ;
	v-wf:inputVariable mnd-wf:var_initiator ;
	v-wf:inputVariable mnd-wf:var_agreed ;
        rdfs:label "Маршрут подписание"@ru ;
.
# ------------------------------ CODELET : "запущен ли процесс" ------------------------------------- #
mnd-wf:codelet_is_run
	rdf:type v-s:Codelet ;
	rdfs:label "запущен ли процесс" ;
	v-s:script """
public Element execute(Element inData, List<YParameter> inParams, List<YParameter> outParams) throws CodeletExecutionException 
{
        // set the inputs passed in the base class
        setInputs(inData, inParams, outParams);
        
        int max;
        
        try{
            max = Integer.parseInt((String) getParameterValue("max"));
        }
        catch (ClassCastException cce) {
            throw new CodeletExecutionException("Exception casting input values to " +
                                                "int types.") ;
        }
                
        //create a random number between 1 and max (input)
        Random generator = new Random();
        int r = generator.nextInt(max) + 1;
        
        //set the value for the output parameter
        setParameterValue("r", String.valueOf(r));
        
        return getOutputData();
};
""" ;
.	
# ------------------------------ CODELET : "понизить права" ----------------------------- #
mnd-wf:codelet_down_right
	rdf:type v-s:Codelet ;
	rdfs:label "понизить права" ;
	v-s:script """
public Element execute(Element inData, List<YParameter> inParams, List<YParameter> outParams) throws CodeletExecutionException 
{
        return getOutputData();
};
""" ;
.	
# ------------------------------ CODELET : "восстановить права" ----------------------------- #
mnd-wf:codelet_restore_right
	rdf:type v-s:Codelet ;
	rdfs:label "восстановить права" ;
	v-s:script """
public Element execute(Element inData, List<YParameter> inParams, List<YParameter> outParams) throws CodeletExecutionException 
{
        return getOutputData();
};
""" ;
.	

