# baseURI: http://semantic-machines.com/veda/mondi-workflow
# imports: http://semantic-machines.com/veda/veda-workflow

# c14n-version: 3
@prefix mnd-wf: <http://semantic-machines.com/veda/mondi-workflow/> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix v-wf: <http://semantic-machines.com/veda/veda-workflow/> .

<http://semantic-machines.com/veda/mondi-workflow>
  rdf:type owl:Ontology ;
  owl:imports <http://semantic-machines.com/veda/veda-workflow> ;
  owl:versionInfo "1.0" ;
  rdfs:label "Mondi workflow ontology"@en ;
  rdfs:label "Онтология бизнес процессов Монди"@ru ;
.
# --- begin ----------------------- NET Complex Route --------------------------------------- #
mnd-wf:net_complex_route
        rdf:type v-wf:Net ;
	v-wf:inputVariable mnd-wf:var_doc_id ;
	v-wf:inputVariable mnd-wf:var_initiator ;
	v-wf:inputVariable mnd-wf:var_agreed_1 ;
	v-wf:inputVariable mnd-wf:var_agreed_2 ;
	v-wf:inputVariable mnd-wf:var_agreed_3 ;
	v-wf:localVariable mnd-wf:var_right_1 ;
        rdfs:label "Complex route"@en ;
        rdfs:label "Комплексный маршрут"@ru ;
.
mnd-wf:var_initiator
        rdf:type v-wf:Variable ;
	v-wf:variableName "initiator" ;
.
mnd-wf:var_doc_id
        rdf:type v-wf:Variable ;
	v-wf:variableName "doc_id" ;
.
mnd-wf:var_agreed_1
        rdf:type v-wf:Variable ;
	v-wf:variableName "agreed_level_1" ;
.
mnd-wf:var_agreed_2
        rdf:type v-wf:Variable ;
	v-wf:variableName "agreed_level_2" ;
.
mnd-wf:var_agreed_3
        rdf:type v-wf:Variable ;
	v-wf:variableName "agreed_level_3" ;
.
mnd-wf:var_right_1
        rdf:type v-wf:Variable ;
	v-wf:variableName "original_right" ;
.
# ------------------------------- NET Complex Route : Input Condition ----------------------------- #
mnd-wf:input_condition_1 
	rdf:type v-wf:InputCondition ;
	v-wf:net mnd-wf:net_complex_route ;
	v-wf:locationX 12 ;
	v-wf:locationY 512 ;
.
# ------------------------------- NET Complex Route : Output Condition ---------------------------- #
mnd-wf:output_condition_1 
	rdf:type v-wf:OutputCondition ;
	v-wf:net mnd-wf:net_complex_route ;
	v-wf:locationX 992 ;
	v-wf:locationY 324 ;
.
# ------------------------------- NET Complex Route : task "Проверить, запущен ли?" ---------------- #
mnd-wf:task_1 
	rdf:type v-wf:Task ;
	rdfs:label "Проверить, запущен ли?" ;
	v-wf:executor mnd-wf:codelet_is_run ;
	v-wf:net mnd-wf:net_complex_route ;
	v-wf:hasFlow mnd-wf:flow_t1_t2 ;
	v-wf:hasFlow mnd-wf:flow_t1_ce ;
	v-wf:split v-wf:XOR ;	
	v-wf:inputVariable mnd-wf:var_doc_id_t1 ;
	v-wf:startingMapping mnd-wf:map_task_1_b ;
	v-wf:locationX 84 ;
	v-wf:locationY 512 ;
.
mnd-wf:var_doc_id_t1
        rdf:type v-wf:Variable ;
	v-wf:variableName "doc_id" ;
.
mnd-wf:map_task_1_b
	rdf:type v-wf:Mapping ;
	v-wf:mapsTo mnd-wf:var_doc_id_t1 ;	
	v-wf:mappingExpression	"net.getVariableValue ('doc_id')" ;
.
mnd-wf:flow_t1_ce
	rdf:type v-wf:Flow ;
	v-wf:net mnd-wf:net_complex_route ;
	v-wf:flowsInto mnd-wf:output_condition_1 ;
	v-wf:predicate "true () ";
.	
mnd-wf:flow_t1_t2
	rdf:type v-wf:Flow ;
	v-wf:net mnd-wf:net_complex_route ;
	v-wf:flowsInto mnd-wf:task_2 ;
	v-wf:predicate "false ()" ;
.	
# ------------------------------- NET Complex Route : task "понизить права" ------------------------- #
mnd-wf:task_2 
	rdf:type v-wf:Task ;
	rdfs:label "понизить права" ;
	v-wf:executor mnd-wf:codelet_store_down_right ;
	v-wf:net mnd-wf:net_complex_route ;
	v-wf:hasFlow mnd-wf:flow_t1_ce ;
	v-wf:inputVariable mnd-wf:var_doc_id_t2 ;
	v-wf:outputVariable mnd-wf:var_t2_rights ;
	v-wf:startingMapping mnd-wf:map_t2_b ;
	v-wf:completedMapping mnd-wf:map_t2_e ;
	v-wf:locationX 120 ;
	v-wf:locationY 348 ;
.
mnd-wf:var_doc_id_t2
        rdf:type v-wf:Variable ;
	v-wf:variableName "doc_id" ;
.
mnd-wf:var_t2_rights
        rdf:type v-wf:Variable ;
	v-wf:variableName "rights" ;
.
mnd-wf:map_t2_b
	rdf:type v-wf:Mapping ;
	v-wf:mapsTo mnd-wf:var_doc_id_t2 ;	
	v-wf:mappingExpression	"net.getVariableValue ('doc_id')" ;
.
mnd-wf:map_t2_e
	rdf:type v-wf:Mapping ;
	v-wf:mapsTo mnd-wf:var_right_1 ;	
	v-wf:mappingExpression	"task.getVariableValue ('rights')" ;
.
# ------------------------------- NET Complex Route : condition 1 ---------------------------------- #
mnd-wf:condition_1
	rdf:type v-wf:Condition ;
	v-wf:net mnd-wf:net_complex_route ;
.
mnd-wf:flow_t2_c1
	rdf:type v-wf:Flow ;
	v-wf:net mnd-wf:net_complex_route ;
	v-wf:flowsInto mnd-wf:condition_1 ;
.	
# ------------------------------- NET Complex Route : task "Согласование 1" ------------------------ #
mnd-wf:task_3
	rdf:type v-wf:Task ;
	v-wf:net mnd-wf:net_complex_route ;
	rdfs:label "Согласование 1" ;
	v-wf:executor mnd-wf:executor_def_1 ;
	v-wf:subNet mnd-wf:net_agree;
.
mnd-wf:executor_def_1
	rdf:type v-wf:ExecutorDefinition ;
	v-s:scipt "{}" ;
.
# --- end ----------------------- NET Complex Route --------------------------------------- #

# ------------------------------- NET Agree --------------------------------------------------------- #
mnd-wf:net_agree
        rdf:type v-wf:Net ;
	v-wf:inputVariable mnd-wf:var_doc_id ;
	v-wf:inputVariable mnd-wf:var_initiator ;
	v-wf:inputVariable mnd-wf:var_agreed ;
        rdfs:label "Маршрут подписание"@ru ;
.
# ------------------------------ CODELET : "запущен ли процесс" ------------------------------------- #
mnd-wf:codelet_is_run
	rdf:type v-s:Codelet ;
	rdfs:label "запущен ли процесс" ;
	v-s:script """
public Element execute(Element inData, List<YParameter> inParams, List<YParameter> outParams) throws CodeletExecutionException 
{
        // set the inputs passed in the base class
        setInputs(inData, inParams, outParams);
        
        int max;
        
        try{
            max = Integer.parseInt((String) getParameterValue("max"));
        }
        catch (ClassCastException cce) {
            throw new CodeletExecutionException("Exception casting input values to " +
                                                "int types.") ;
        }
                
        //create a random number between 1 and max (input)
        Random generator = new Random();
        int r = generator.nextInt(max) + 1;
        
        //set the value for the output parameter
        setParameterValue("r", String.valueOf(r));
        
        return getOutputData();
};
""" ;
.	
# ------------------------------ CODELET : "Запомнить и понизить права" ----------------------------- #
mnd-wf:codelet_store_down_right
	rdf:type v-s:Codelet ;
	rdfs:label "Запомнить и понизить права" ;
	v-s:script """
public Element execute(Element inData, List<YParameter> inParams, List<YParameter> outParams) throws CodeletExecutionException 
{
        return getOutputData();
};
""" ;
.	

