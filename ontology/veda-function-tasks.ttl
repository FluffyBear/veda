@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix v-s: <http://semantic-machines.com/veda/veda-schema/> .
@prefix v-ui: <http://semantic-machines.com/veda/veda-ui/> .
@prefix v-fs: <http://semantic-machines.com/veda/veda-function-search/> .
@prefix v-wf: <http://semantic-machines.com/veda/veda-workflow/> .
@prefix cfg: <http://semantic-machines.com/veda/config/> .

@prefix v-ft: <http://semantic-machines.com/veda/veda-function-tasks/> .
<http://semantic-machines.com/veda/veda-function-tasks>
  rdf:type owl:Ontology ;
  rdfs:label "Veda system function 'Tasks' ontology"@en ;
  rdfs:label "Онтология функции 'Задачи' системы Веда"@ru ;
#  owl:versionInfo "0.1" ;
  v-s:loadPriority 9 ;
.

########## TASKS COUNTERS ###########

v-ft:TaskCounter
  rdf:type owl:Class ;
  rdfs:subClassOf v-s:SystemThing ;
  rdfs:label "Task counter"@en ;
  rdfs:label "Счетчик задач"@ru ;
.
v-ft:inboxCount
  rdf:type owl:DatatypeProperty ;
  rdfs:domain v-ft:TaskCounter ;
  rdfs:range xsd:integer ;
  rdfs:label "количество входящих"@en ;
  rdfs:label "inbox сount"@ru ;
.
v-ft:inboxWeekCount
  rdf:type owl:DatatypeProperty ;
  rdfs:domain v-ft:TaskCounter ;
  rdfs:range xsd:integer ;
  rdfs:label "количество входящих на текущую неделю"@en ;
  rdfs:label "inbox сount for current week"@ru ;
.
v-ft:outboxCount
  rdf:type owl:DatatypeProperty ;
  rdfs:domain v-ft:TaskCounter ;
  rdfs:range xsd:integer ;
  rdfs:label "количество исходящих"@en ;
  rdfs:label "outbox сount"@ru ;
.
v-ft:completedCount
  rdf:type owl:DatatypeProperty ;
  rdfs:domain v-ft:TaskCounter ;
  rdfs:range xsd:integer ;
  rdfs:label "количество выполненных"@en ;
  rdfs:label "completed сount"@ru ;
.

v-ft:Event_UpdateTaskCounter
  rdf:type v-s:Event ;
  v-s:author cfg:VedaSystem ;
  rdfs:label "Скрипт обновления счетчиков задач" ;
  v-s:triggerByType v-wf:DecisionForm ;
  v-s:script """
/* Available variables:
 * ticket = superuser ticket
 * document = captured document
 * user_uri = user whose actions triggered event
 * prev_state = user whose actions triggered event
 * _event_id = id of the event to prevent cycles in triggers. Must be passed to every function that modifies DB.
 * parent_script_id = id of the parent script that triggered this event.
 * parent_document_id = id of the document that triggered this event.
 */
var task = document,
    task_uri = document["@"],
    to = getUri(task["v-wf:to"]),
    from = getUri(task["v-wf:from"]),
    isNew = !prev_state,
    isCompleted = !isNew && !hasValue(prev_state, "v-wf:isCompleted", {type: _Boolean, data: true}) && hasValue(task, "v-wf:isCompleted", {type: _Boolean, data: true}),
    isDeleted = !isNew && !hasValue(prev_state, "v-s:deleted", {type: _Boolean, data: true}) && hasValue(task, "v-s:deleted", {type: _Boolean, data: true}),
    toCounterUri,
    fromCounterUri,
    toCounter,
    fromCounter,
    updateTo,
    updateFrom;

// get or create task counter
if (to) {
  toCounterUri = "d:taskCounter_" + to.split(':').join('_');
  toCounter = get_individual(ticket, toCounterUri) || createTaskCounter(to);
}
if (from) {
  fromCounterUri = "d:taskCounter_" + from.split(':').join('_');
  fromCounter = get_individual(ticket, fromCounterUri) || createTaskCounter(from);
}
// task sender === task receiver
if (to === from) {
  fromCounter = toCounter;
}

updateTo = !!toCounter,
updateFrom = !!fromCounter;

var today = new Date(),
    monday = new Date(),
    sunday = new Date();

monday.setDate(monday.getDate() - monday.getDay() + 1);
sunday.setDate(sunday.getDate() + 7 - sunday.getDay());
monday.setHours(0); monday.setMinutes(0); monday.setSeconds(0); monday.setMilliseconds(0);
sunday.setHours(23); sunday.setMinutes(59); sunday.setSeconds(59); sunday.setMilliseconds(999);

var isThisWeekTask = hasValue(task, "v-wf:dateGiven") && (monday < task["v-wf:dateGiven"][0].data && task["v-wf:dateGiven"][0].data < sunday);

print("************************** START **************************");
print("task =", task_uri, "| from =", from, "| to =", to, "| isNew =", isNew, "| isDeleted =", isDeleted, "| isCompleted =", isCompleted, "| isThisWeekTask =", isThisWeekTask);

if ( isNew || isDeleted || isCompleted ) {
  if (updateTo) {
    var toInboxCount = toCounter["v-ft:inboxCount"][0],
        toInboxWeekCount = toCounter["v-ft:inboxWeekCount"][0],
        toOutboxCount = toCounter["v-ft:outboxCount"][0],
        toCompletedCount = toCounter["v-ft:completedCount"][0];
    switch (true) {
      case isNew:
        toInboxCount.data++;
        if (isThisWeekTask) {
          toInboxWeekCount.data++;
        }
        break;
      case isCompleted:
        toInboxCount.data--;
        toCompletedCount.data++;
        if (isThisWeekTask) {
          toInboxWeekCount.data--;
        }
        break;
      case isDeleted:
        toInboxCount.data--;
        if (isThisWeekTask) {
          toInboxWeekCount.data--;
        }
        break;
    }
    put_individual(ticket, toCounter, _event_id);
    print("toCounter updated =", JSON.stringify(toCounter));
  }

  if (updateFrom) {
    var fromInboxCount = fromCounter["v-ft:inboxCount"][0],
        fromOutboxCount = fromCounter["v-ft:outboxCount"][0],
        fromCompletedCount = fromCounter["v-ft:completedCount"][0];
    switch (true) {
      case isNew:
        fromOutboxCount.data++;
        break;
      case isCompleted:
        fromOutboxCount.data--;
        break;
      case isDeleted:
        fromOutboxCount.data--;
        break;
    }
    put_individual(ticket, fromCounter, _event_id);
    print("fromCounter updated =", JSON.stringify(fromCounter));
  }
}
print("************************** END **************************");

function createTaskCounter(owner) {
  if (owner === null) { return; }
  var uri = "d:taskCounter_" + owner.split(':').join('_'),
      inbox = query(ticket, "('rdf:type' == 'v-wf:DecisionForm' && 'v-wf:isCompleted' == false && 'v-wf:to' == '" + owner + "')"),
      inboxCount = inbox[0] ? inbox.length : 0,
      outbox = query(ticket, "('rdf:type' == 'v-wf:DecisionForm' && 'v-wf:isCompleted' == false && 'v-wf:from' == '" + owner + "')"),
      outboxCount = outbox[0] ? outbox.length : 0,
      completed = query(ticket, "('rdf:type' == 'v-wf:DecisionForm' && 'v-wf:isCompleted' == true && 'v-wf:to' == '" + owner + "')"),
      completedCount = completed[0] ? completed.length : 0;

  var today = new Date(),
      monday = new Date(),
      sunday = new Date();

  monday.setDate(monday.getDate() - monday.getDay() + 1);
  sunday.setDate(sunday.getDate() + 7 - sunday.getDay());
  monday.setHours(0); monday.setMinutes(0); monday.setSeconds(0); monday.setMilliseconds(0);
  sunday.setHours(23); sunday.setMinutes(59); sunday.setSeconds(59); sunday.setMilliseconds(999);

  var inboxWeek = query(ticket, "('rdf:type' == 'v-wf:DecisionForm' && 'v-wf:isCompleted' == false && 'v-wf:to' == '" + owner + "' && 'v-wf:dateGiven' == [" + monday.toISOString() +  "," + sunday.toISOString() + "])"),
      inboxWeekCount = inboxWeek[0] ? inboxWeek.length : 0;

  var taskCounter = {
    "@": uri,
    "rdf:type": newUri('v-ft:TaskCounter'),
    "v-s:owner": newUri(owner),
    "v-ft:inboxCount": newInt(inboxCount),
    "v-ft:inboxWeekCount": newInt(inboxWeekCount),
    "v-ft:outboxCount": newInt(outboxCount),
    "v-ft:completedCount": newInt(completedCount),
    "rdfs:label": newStr("создано автоматически в обработчике v-ft:Event_UpdateAllTaskCounters")
  };
  put_individual(ticket, taskCounter, _event_id);
  if (inboxCount + outboxCount + completedCount + inboxWeekCount) {
    print(
      "Calculated counters:", uri,
      "| inbox =", JSON.stringify(inbox), "| inboxCount =", inboxCount,
      "| outbox =", JSON.stringify(outbox), "| outboxCount =", outboxCount,
      "| completed =", JSON.stringify(completed), "| completedCount =", completedCount,
      "| inboxWeek =", JSON.stringify(inboxWeek), "| inboxWeekCount =", inboxWeekCount
    );
  }
  return taskCounter;
}
  """ ;
.

v-ft:Event_UpdateAllTaskCounters
  rdf:type v-s:Event ;
  v-s:author cfg:VedaSystem ;
  rdfs:label "Еженедельный скрипт обновления счетчиков задач для всех должностей и назначений" ;
  v-s:triggerByUid cfg:weekly ;
  v-s:runAt "V8.LowPriority" ;
  v-s:script """
/* Available variables:
 * ticket = superuser ticket
 * document = captured document
 * user_uri = user whose actions triggered event
 * prev_state = user whose actions triggered event
 * _event_id = id of the event to prevent cycles in triggers. Must be passed to every function that modifies DB.
 * parent_script_id = id of the parent script that triggered this event.
 * parent_document_id = id of the document that triggered this event.
 */
print("************************** START **************************");

var owners = query(ticket, "'rdf:type'==='v-s:Position' || 'rdf:type'==='v-s:Appointment'");
print("owners count =", owners.length);

owners.forEach(createTaskCounter);

print("************************** END **************************");

function createTaskCounter(owner) {
  if (owner === null) { return; }
  var uri = "d:taskCounter_" + owner.split(':').join('_'),
      inbox = query(ticket, "('rdf:type' == 'v-wf:DecisionForm' && 'v-wf:isCompleted' == false && 'v-wf:to' == '" + owner + "')"),
      inboxCount = inbox[0] ? inbox.length : 0,
      outbox = query(ticket, "('rdf:type' == 'v-wf:DecisionForm' && 'v-wf:isCompleted' == false && 'v-wf:from' == '" + owner + "')"),
      outboxCount = outbox[0] ? outbox.length : 0,
      completed = query(ticket, "('rdf:type' == 'v-wf:DecisionForm' && 'v-wf:isCompleted' == true && 'v-wf:to' == '" + owner + "')"),
      completedCount = completed[0] ? completed.length : 0;

  var today = new Date(),
      monday = new Date(),
      sunday = new Date();

  monday.setDate(monday.getDate() - monday.getDay() + 1);
  sunday.setDate(sunday.getDate() + 7 - sunday.getDay());
  monday.setHours(0); monday.setMinutes(0); monday.setSeconds(0); monday.setMilliseconds(0);
  sunday.setHours(23); sunday.setMinutes(59); sunday.setSeconds(59); sunday.setMilliseconds(999);

  var inboxWeek = query(ticket, "('rdf:type' == 'v-wf:DecisionForm' && 'v-wf:isCompleted' == false && 'v-wf:to' == '" + owner + "' && 'v-wf:dateGiven' == [" + monday.toISOString() +  "," + sunday.toISOString() + "])"),
      inboxWeekCount = inboxWeek[0] ? inboxWeek.length : 0;

  var taskCounter = {
    "@": uri,
    "rdf:type": newUri('v-ft:TaskCounter'),
    "v-s:owner": newUri(owner),
    "v-ft:inboxCount": newInt(inboxCount),
    "v-ft:inboxWeekCount": newInt(inboxWeekCount),
    "v-ft:outboxCount": newInt(outboxCount),
    "v-ft:completedCount": newInt(completedCount),
    "rdfs:label": newStr("создано автоматически в обработчике v-ft:Event_UpdateAllTaskCounters")
  };
  put_individual(ticket, taskCounter, _event_id);
  if (inboxCount + outboxCount + completedCount + inboxWeekCount) {
    print(
      "Calculated counters:", uri,
      "| inbox =", JSON.stringify(inbox), "| inboxCount =", inboxCount,
      "| outbox =", JSON.stringify(outbox), "| outboxCount =", outboxCount,
      "| completed =", JSON.stringify(completed), "| completedCount =", completedCount,
      "| inboxWeek =", JSON.stringify(inboxWeek), "| inboxWeekCount =", inboxWeekCount
    );
  }
  return taskCounter;
}
  """ ;
.

########## TASKS FUNCTION ###########

v-ft:FunctionTasks
  rdf:type owl:Class ;
  rdfs:subClassOf v-s:SystemThing ;
  rdfs:label "Function 'Tasks'"@en ;
  rdfs:label "Функция 'Задачи'"@ru ;
.
v-ft:query
  rdf:type owl:DatatypeProperty ;
  rdfs:domain v-ft:FunctionTasks ;
  rdfs:range xsd:string ;
.
v-ft:sortOrder
  rdf:type owl:DatatypeProperty ;
  rdfs:domain v-ft:FunctionTasks ;
  rdfs:range xsd:string ;
.
v-ft:FunctionTasksModel
  rdf:type v-s:ClassModel ;
  rdfs:label "V-ft:FunctionTasks class template"@en ;
  rdfs:label "Шаблон для класса v-ft:FunctionTasks"@ru ;
  v-ui:forClass v-ft:FunctionTasks ;
  v-s:script """
  var self = this;
  var q = self["v-ft:query"][0].replace("$1", veda.appointment ? veda.appointment.id : veda.user.id).replace("$2", veda.appointment ? veda.appointment["v-s:occupation"][0].id : veda.user.id);
  self["v-ft:query"] = [q];
  var tasks = new veda.IndividualModel();
  tasks["rdf:type"] = [ new veda.IndividualModel("v-fs:FulltextRequest") ];
  tasks["v-fs:fulltextQuery"] = self["v-ft:query"].slice(0);
  tasks["v-fs:sortOrder"] = self["v-ft:sortOrder"].slice(0);
  self.tasks = tasks;
  //# sourceURL=v-ft:FunctionTasksModel
  """
.
v-ft:Inbox
  rdf:type v-ft:FunctionTasks ;
  rdfs:label "Inbox"@en ;
  rdfs:label "Входящие"@ru ;
  v-ft:query "('rdf:type' == 'v-wf:DecisionForm' && 'v-wf:isCompleted' == false && ('v-wf:to' == '$1' || 'v-wf:to' == '$2'))"^^xsd:string ;
  v-ft:sortOrder "'v-s:created' desc"^^xsd:string ;
.
v-ft:Outbox
  rdf:type v-ft:FunctionTasks ;
  rdfs:label "Outbox"@en ;
  rdfs:label "Исходящие"@ru ;
  v-ft:query "('rdf:type' == 'v-wf:DecisionForm' && 'v-wf:isCompleted' == false && ('v-wf:from' == '$1' || 'v-wf:from' == '$2'))"^^xsd:string ;
  v-ft:sortOrder "'v-s:created' desc"^^xsd:string ;
.
v-ft:Completed
  rdf:type v-ft:FunctionTasks ;
  rdfs:label "Completed"@en ;
  rdfs:label "Выполненные"@ru ;
  v-ft:query "('rdf:type' == 'v-wf:DecisionForm' && 'v-wf:isCompleted' == true && ('v-wf:to' == '$1' || 'v-wf:to' == '$2'))"^^xsd:string ;
  v-ft:sortOrder "'v-s:created' desc"^^xsd:string ;
.
v-ft:TasksNotFound
  rdf:type v-s:Bundle ;
  rdfs:label "Tasks not found"@en ;
  rdfs:label "Задачи не найдены"@ru ;
.
v-ft:FunctionTasksTemplate
  rdf:type v-ui:ClassTemplate ;
  rdfs:label "V-ft:FunctionInbox class template"@en ;
  rdfs:label "Шаблон для класса v-ft:FunctionInbox"@ru ;
  v-ui:forClass v-ft:FunctionTasks ;
  v-ui:template """
<script>
  $("#box-tabs", template)
    .find("a")
    .filter(function () { return this.hash.substr(2) === individual.id; })
    .parent()
    .addClass("active");
  //# sourceURL=v-ft:FunctionTasksTemplate_pre
</script>
<div class="container sheet">
  <br>
  <ul id="box-tabs" class="nav nav-tabs nav-right" role="tablist">
    <li class="pull-left"><h2 class="no-margin" about="@" property="rdfs:label"></h2></li>
    <li role="presentation"><a id="refresh" href="#refresh"><i class="fa fa-refresh fa-lg"></i></a></li>
    <li role="presentation"><a href="#/v-ft:Completed" about="v-ft:Completed" property="rdfs:label"></a></li>
    <li role="presentation"><a href="#/v-ft:Outbox" about="v-ft:Outbox" property="rdfs:label"></a></li>
    <li role="presentation"><a href="#/v-ft:Inbox" about="v-ft:Inbox" property="rdfs:label"></a></li>
  </ul>
  <br>
  <table class="table table-condensed table-bordered table-striped">
    <thead>
      <tr>
        <th width="20px">#</th>
        <th width="20px"><span class="glyphicon glyphicon-search"></span></th>
        <th width="10%">
          <a id="v-wf:from" href="#" class="btn btn-xs btn-link glyphicon glyphicon-sort-by-attributes text-muted"></a>
          <span about="v-wf:from" property="rdfs:label"></span>
        </th>
        <th width="10%">
          <a id="v-wf:to" href="#" class="btn btn-xs btn-link glyphicon glyphicon-sort-by-attributes text-muted"></a>
          <span about="v-wf:to" property="rdfs:label"></span>
        </th>
        <th>
          <a id="rdfs:label" href="#" class="btn btn-xs btn-link glyphicon glyphicon-sort-by-attributes text-muted"></a>
          <span about="v-s:description" property="rdfs:label"></span>
        </th>
        <th width="40%">
          <a id="v-wf:onDocument" href="#" class="btn btn-xs btn-link glyphicon glyphicon-sort-by-attributes text-muted"></a>
          <span about="v-wf:onDocument" property="rdfs:label"></span>
        </th>
        <th width="10%">
          <a id="v-wf:dateGiven" href="#" class="btn btn-xs btn-link glyphicon glyphicon-sort-by-attributes text-muted"></a>
          <span about="v-wf:dateGiven" property="rdfs:label"></span>
        </th>
      </tr>
    </thead>
    <tbody id="tasks"></tbody>
  </table>
  <div style="display:none" class="not-found alert alert-warning" about="v-ft:TasksNotFound" property="rdfs:label"></div>
  <div class="text-center">
    <ul class="pagination" id="pager"></ul>
  </div>
</div>
<script>
  var tasks = individual.tasks;
  tasks.on("afterSearch", renderTasks);
  template.one("remove", function () {
    tasks.off("afterSearch", renderTasks);
  });

  var tmplInd = new veda.IndividualModel("v-ft:TaskTemplate");
  var tmpl = tmplInd["v-ui:template"][0].toString();
  var cnt = $("#tasks", template);
  var notFound = $(".not-found", template);
  var sorts = $("th > a", template);
  var pager = $("#pager", template);
  sorts.on("click", function (e) {
    e.preventDefault();
    var sortOrder = $(this);
    var dir = sortOrder.hasClass("glyphicon-sort-by-attributes-alt") ? " asc" : " desc";
    sortOrder.toggleClass("glyphicon-sort-by-attributes glyphicon-sort-by-attributes-alt");
    if (this.id === "v-s:description") {
      tasks["v-fs:sortOrder"] = ["'" + this.id + "_" + Object.keys(veda.user.language)[0].toLowerCase() + "'" + dir];
    } else {
      tasks["v-fs:sortOrder"] = ["'" + this.id + "'" + dir];
    }
    tasks.search();
    return false;
  });

  tasks.search();

  $("#refresh", template).click(function (e) {
    e.preventDefault();
    tasks.search();
  });

  function renderTasks(result) {
    cnt.empty();
    pager.empty();

    if (result.length) {
      notFound.hide();

      var sortBy = "", dir = "";
      if ( tasks.hasValue("v-fs:sortOrder") ) {
        var t = tasks["v-fs:sortOrder"][0].split(" ");
        sortBy = t[0]; dir = t[1];
      }

      sorts.each(function () {
        var sortOrder = $(this);
        if (sortBy.indexOf(this.id) >= 0) {
          sortOrder.removeClass("text-muted");
          if (dir === "desc") sortOrder.removeClass("glyphicon-sort-by-attributes").addClass("glyphicon-sort-by-attributes-alt");
        } else {
          sortOrder.addClass("text-muted");
        }
      });

      tasks.page = tasks.page || 0;
      if (tasks.count < tasks.page * veda.user.displayedElements) {
        tasks.page = Math.floor(tasks.count / veda.user.displayedElements) + 1 * (tasks.count % veda.user.displayedElements ? 1 : 0) - 1;
      }

      for (var result, _tmpl, i = tasks.page * veda.user.displayedElements; i < (tasks.page + 1) * veda.user.displayedElements && i < tasks.count; i++) {
        result = tasks.result[i] ? new veda.IndividualModel( tasks.result[i] ) : undefined;
        if (result) {
          if (individual.id === "v-ft:Inbox" && result.hasValue("v-wf:takenDecision") && result.isSync()) {
            tasks.result.splice(i--, 1);
            continue;
          } else {
            _tmpl = tmpl.replace("###", i+1);
            result.present(cnt, $(_tmpl));
          }
        }
      }

      // Show pager
      for (var pg = 0; pg < Math.floor(tasks.count / veda.user.displayedElements) + 1 * (tasks.count % veda.user.displayedElements ? 1 : 0); pg++) {
        var $pg = $("<li/>")
          .attr("class", pg === tasks.page ? "active" : "")
          .appendTo(pager);
        var $a = $("<a/>", {
          "text" : pg + 1,
          "click": (function (pg) {
            if (pg === tasks.page) return $.noop;
            return function (event) {
              event.preventDefault();
              tasks.page = pg;
              tasks.trigger("afterSearch", tasks.result);
            }
          })(pg),
          "href" : ""
        }).appendTo($pg);
      }
    } else {
      notFound.show();
    }
  }
  //# sourceURL=v-ft:FunctionTasksTemplate
</script>
  """ ;
.

v-ft:TaskTemplate
  rdf:type v-ui:ClassTemplate ;
  rdfs:label "Task template for table of tasks"@en ;
  rdfs:label "Шаблон задачи для таблицы задач"@ru ;
  v-ui:template """
<tr>
  <td>###</td>
  <td><a href="#/@" class="glyphicon glyphicon-search"></a></td>
  <td rel="v-wf:from" data-template="v-ui:LabelTemplate"></td>
  <td rel="v-wf:to" data-template="v-ui:LabelTemplate"></td>
  <td>
    <a href="#/@" property="rdfs:label"></a>
    <p><span property="v-s:description"></span></p>
  </td>
  <td rel="v-wf:onDocument" data-template="v-ui:ClassNameLabelTemplate"></td>
  <td property="v-wf:dateGiven"></td>
</tr>
<script>
  if ( !individual.hasValue("v-wf:read") || individual["v-wf:read"][0] != true) {
    template.css("font-weight", "bold");
  }
  template.dblclick(function (e) {
    riot.route("#/" + individual.id);
    e.stopPropagation();
  });
  //# sourceURL=v-ft:TaskTemplate
</script>
  """ ;
.

v-ft:FunctionTasksIndicatorTemplate
  rdf:type v-ui:ClassTemplate ;
  rdfs:label "V-ft:FunctionInbox indicator template"@en ;
  rdfs:label "Шаблон индикатора для v-ft:FunctionInbox"@ru ;
  v-ui:template """
<script>
  var pos_uri = veda.appointment && veda.appointment.hasValue("v-s:occupation") ? veda.appointment["v-s:occupation"][0].id : undefined,
      pos_counter_uri = pos_uri ? "d:taskCounter_" + pos_uri.split(":").join("_") : undefined;
  $(".label", template).attr("about", pos_counter_uri);
  template.tooltip({
    container: template,
    title: individual["rdfs:label"].join(" ")
  });

  //# sourceURL=v-ft:FunctionTasksIndicatorTemplate_pre
</script>
<a href="#/@" data-toggle="tooltip" data-trigger="hover" data-placement="bottom">
  <span class="fa fa-envelope-o fa-lg"></span> <span id="counter" class="label label-danger" property="v-ft:inboxCount">0</span>
</a>
  """ ;
.
