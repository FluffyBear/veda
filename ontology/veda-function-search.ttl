# baseURI: http://semantic-machines.com/veda/veda-ui
# imports: http://semantic-machines.com/veda/veda-schema
# imports: http://www.w3.org/1999/02/22-rdf-syntax-ns#
# imports: http://www.w3.org/2000/01/rdf-schema#
# imports: http://www.w3.org/2002/07/owl

# c14n-version: 3
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix v-a: <http://semantic-machines.com/veda/veda-admin/> .
@prefix v-s: <http://semantic-machines.com/veda/veda-schema/> .
@prefix v-ui: <http://semantic-machines.com/veda/veda-ui/> .
@prefix v-b: <http://semantic-machines.com/veda/veda-bundle/> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix v-fs: <http://semantic-machines.com/veda/veda-function-search/> .

<http://semantic-machines.com/veda/veda-function-search>
  rdf:type owl:Ontology ;
  rdfs:label "Veda system function 'Search' ontology"@en ;
  rdfs:label "Онтология функции 'Поиск' системы Веда"@ru ;
  owl:imports <http://semantic-machines.com/veda/veda-schema> ;
  owl:imports <http://semantic-machines.com/veda/veda-ui> ;
  owl:imports rdf: ;
  owl:imports rdfs: ;
  owl:imports <http://www.w3.org/2002/07/owl> ;
#  owl:versionInfo "0.2" ;
.

########## SEARCH FUNCTION ###########

v-fs:FunctionSearch
  rdf:type owl:Class ;
  rdfs:label "Function Search"@en ;
  rdfs:label "Функция Поиск"@ru ;
  rdfs:subClassOf owl:Thing ;
.
v-fs:FulltextRequest
  rdf:type owl:Class ;
  rdfs:label "Fulltext request"@en ;
  rdfs:label "Полнотекстовый запрос"@ru ;
  rdfs:subClassOf owl:Thing ;
.
v-fs:AttributiveRequest
  rdf:type owl:Class ;
  rdfs:label "Attributive request"@en ;
  rdfs:label "Аттрибутивный запрос"@ru ;
  rdfs:subClassOf owl:Thing ;
.
v-fs:Search
  rdf:type v-fs:FunctionSearch ;
  rdfs:label "Search"@en ;
  rdfs:label "Найти"@ru ;
.
v-fs:fulltextQuery
  rdf:type owl:DatatypeProperty ;
  rdfs:label "query"@en ;
  rdfs:label "запрос"@ru ;
  rdfs:domain v-fs:FulltextRequest ;
  rdfs:range xsd:string ;
.
v-fs:sortOrder
  rdf:type owl:DatatypeProperty ;
  rdfs:label "sort order"@en ;
  rdfs:label "порядок сортировки"@ru ;
  rdfs:domain v-fs:FulltextRequest ;
  rdfs:domain v-fs:AttributiveRequest ;
  rdfs:range xsd:string ;
.
v-fs:databases
  rdf:type owl:DatatypeProperty ;
  rdfs:label "databases"@en ;
  rdfs:label "базы данных"@ru ;
  rdfs:domain v-fs:FulltextRequest ;
  rdfs:domain v-fs:AttributiveRequest ;
  rdfs:range xsd:string ;
.
v-fs:reopen
  rdf:type owl:DatatypeProperty ;
  rdfs:label "reopen"@en ;
  rdfs:label "открыть заново"@ru ;
  rdfs:domain v-fs:FulltextRequest ;
  rdfs:domain v-fs:AttributiveRequest ;
  rdfs:range xsd:boolean ;
.
v-fs:typeToSearch
  rdf:type owl:ObjectProperty ;
  rdfs:label "тип искомого объекта"@ru ;
  rdfs:label "type of object to search"@en ;
  rdfs:domain v-fs:FulltextRequest ;
  rdfs:domain v-fs:AttributiveRequest ;
  rdfs:range owl:Class ;
  rdfs:range rdfs:Class ;
.
v-fs:TypeToSearchSpecFT
  rdf:type v-ui:ObjectPropertySpecification ;
  rdfs:label "Спецификация свойства v-fs:typeToSearch для класса v-fs:FulltextRequest"@ru ;
  rdfs:label "v-fs:typeToSearch property specification for class v-fs:AttributiveRequest"@en ;
  v-ui:forClass v-fs:FulltextRequest ;
  v-ui:forProperty v-fs:typeToSearch ;
  v-ui:tooltip "Ссылка на объект класса Класс."@ru ;
  v-ui:tooltip "Link to instance of Class class"@en ;
.
v-fs:TypeToSearchSpecAttributive
  rdf:type v-ui:ObjectPropertySpecification ;
  rdfs:label "Спецификация свойства v-fs:typeToSearch для класса v-fs:FulltextRequest"@ru ;
  rdfs:label "v-fs:typeToSearch property specification for class v-fs:AttributiveRequest"@en ;
  v-ui:forClass v-fs:AttributiveRequest ;
  v-ui:forProperty v-fs:typeToSearch ;
  v-ui:tooltip "Ссылка на объект класса Класс."@ru ;
  v-ui:tooltip "Link to instance of Class class"@en ;
  v-ui:maxCardinality "1"^^xsd:integer ;
.
v-fs:FulltextQuerySpec
  rdf:type v-ui:StringPropertySpecification ;
  rdfs:label "Спецификация свойства v-fs:fulltextQuery для класса v-fs:FulltextRequest"@ru ;
  rdfs:label "v-fs:fulltextQuery property specification for class v-fs:FulltextRequest"@en ;
  v-ui:forClass v-fs:FulltextRequest ;
  v-ui:forProperty v-fs:fulltextQuery ;
  v-ui:maxCardinality "1"^^xsd:integer ;
  v-ui:tooltip "Введите запрос"@ru ;
  v-ui:tooltip "Enter query"@en ;
.
v-fs:LabelSpec
  rdf:type v-ui:StringPropertySpecification ;
  rdfs:label "Спецификация свойства rdfs:label для классов v-fs:FulltextRequest, v-fs:AttributiveRequest"@ru ;
  rdfs:label "rdfs:label property specification for class v-fs:FulltextRequest, v-fs:AttributiveRequest"@en ;
  v-ui:forClass v-fs:FulltextRequest ;
  v-ui:forClass v-fs:AttributiveRequest ;
  v-ui:forProperty rdfs:label ;
  v-ui:tooltip "Обязательно. Строка произвольной длины."@ru ;
  v-ui:tooltip "Mandatory. Arbitrary length string."@en ;
  v-ui:maxCardinality "1"^^xsd:integer ;
  v-ui:minCardinality "1"^^xsd:integer ;
.
v-fs:RequestMgmt
  rdf:type v-b:Bundle ;
  rdfs:label "Request management"@en ;
  rdfs:label "Управление запросом"@ru ;
.
v-fs:SavedRequests
  rdf:type v-b:Bundle ;
  rdfs:label "Saved requests"@en ;
  rdfs:label "Сохраненные запросы"@ru ;
.
v-fs:Fulltext
  rdf:type v-b:Bundle ;
  rdfs:label "Fulltext"@en ;
  rdfs:label "Полнотекстовый"@ru ;
.
v-fs:Attributive
  rdf:type v-b:Bundle ;
  rdfs:label "Attributive"@en ;
  rdfs:label "Атрибутивный"@ru ;
.
v-fs:Request
  rdf:type v-b:Bundle ;
  rdfs:label "Request"@en ;
  rdfs:label "Запрос"@ru ;
.
v-fs:EnterQuery
  rdf:type v-b:Bundle ;
  rdfs:label "Enter query"@en ;
  rdfs:label "Введите запрос"@ru ;
.
v-fs:ChooseType
  rdf:type v-b:Bundle ;
  rdfs:label "Choose type to search"@en ;
  rdfs:label "Выберите тип объекта"@ru ;
.
v-fs:Params
  rdf:type v-b:Bundle ;
  rdfs:label "Parameters"@en ;
  rdfs:label "Параметры"@ru ;
.
v-fs:Find
  rdf:type v-b:Bundle ;
  rdfs:label "Find"@en ;
  rdfs:label "Найти"@ru ;
.
v-fs:Results
  rdf:type v-b:Bundle ;
  rdfs:label "Results"@en ;
  rdfs:label "Результаты"@ru ;
.
v-fs:Empty
  rdf:type v-b:Bundle ;
  rdfs:label "Empty!"@en ;
  rdfs:label "Пусто!"@ru ;
.
v-fs:NothingFound
  rdf:type v-b:Bundle ;
  rdfs:label "Nothing found for your request. Please refine the query."@en ;
  rdfs:label "По Вашему запросу ничего не найдено. Пожалуйста, уточните запрос."@ru ;
.
v-fs:SearchTemplate
  rdf:type v-ui:ClassTemplate ;
  rdfs:label "Search class template"@en ;
  rdfs:label "Шаблон класса поиск"@ru ;
  v-ui:forClass v-fs:FunctionSearch ;
  v-ui:template """
	<div class="container-fluid">
		<h3 about="v-fs:Find" property="rdfs:label"></h3>
		<hr>
		<div class="row">
			<div class="col-md-2 col-sm-3">
				<h4></h4>
				<ul class="nav nav-pills nav-stacked" role="tablist">
					<li role="presentation" class="active"><a href="#fulltext" about="v-fs:Fulltext" property="rdfs:label" aria-controls="fulltext" role="tab" data-toggle="tab"></a></li>
					<li role="presentation"><a href="#attributive" about="v-fs:Attributive" property="rdfs:label" aria-controls="attributive" role="tab" data-toggle="tab"></a></li>
				</ul>
				<hr>
				<h4 about="v-fs:SavedRequests" property="rdfs:label"></h4>
				<ol id="saved"></ol>
			</div>
			<div class="col-md-10 col-sm-9" style="border-left: 1px solid gainsboro;">
				<div class="tab-content">
					<div role="tabpanel" class="tab-pane active" id="fulltext"></div>
					<div role="tabpanel" class="tab-pane" id="attributive"></div>
				</div>
			</div>
		</div>
	</div>
	<script>
		var self = individual,
			ftHolder = $("#fulltext", template),
			attrHolder = $("#attributive", template);
		if (!self.ftRequest) {
			self.ftRequest = new veda.IndividualModel();
			self.ftRequest["rdf:type"] = [ new veda.IndividualModel("v-fs:FulltextRequest") ];
		}
		self.ftRequest.present(ftHolder, undefined, "edit");

		if (!self.attrRequest) {
			self.attrRequest = new veda.IndividualModel();
			self.attrRequest["rdf:type"] = [ new veda.IndividualModel("v-fs:AttributiveRequest") ];
		}
		self.attrRequest.present(attrHolder, undefined, "edit");
		
		var regsHolder = $("#saved", template),
			asp = veda.user.aspect,
			regs = asp["v-asp:hasRegistry"];
		if (regs) {
			regs.map( function (reg) {
				var cont = $("<li>").appendTo(regsHolder);
				reg.present(cont, veda.ontology["v-ui:LabelBlockLinkTemplate"]);
			});
		}
	</script>
"""
.
v-fs:FulltextRequestModel
  rdf:type v-s:ClassModel ;
  rdfs:label "v-fs:FulltextRequest class model"@en ;
  rdfs:label "Модель класса v-fs:FulltextRequest"@ru ;
  v-ui:forClass v-fs:FulltextRequest ;
  v-s:script """
	var self = individual,
		q = mkQuery(),
		sort = self.hasValue("v-fs:sortOrder")      ? self["v-fs:sortOrder"][0] : undefined,
		databases = self.hasValue("v-fs:databases") ? self["v-fs:databases"][0] : undefined,
		reopen = self.hasValue("v-fs:reopen")       ? self["v-fs:reopen"][0]    : false;
	
	self.on("individual:propertyModified", function (property_uri, values) {
		switch (property_uri) {
			case "v-fs:typeToSearch": 
			case "v-fs:fulltextQuery" : q = mkQuery(); break;
			case "v-fs:sortOrder"   : sort = values.length      ? values[0].toString() : undefined; break;
			case "v-fs:databases"   : databases = values.length ? values[0].toString() : undefined; break;
			case "v-fs:reopen"      : reopen = values.length    ? values[0].toString() : false; break;
		}
	});
	self.result  = [];
	self.count  = 0;
	self.selected = [];
	self.search = function () {
		self.trigger("beforeSearch");
		self.result = query(veda.ticket, q, sort, databases, reopen);
		self.count = self.result.length;
		self.trigger("afterSearch");
		return self.result;
	};
	// Search if query defined
	if (q) { self.search() };
	
	function mkQuery () {
		var type = self.hasValue("v-fs:typeToSearch") ? 
				"(" + self["v-fs:typeToSearch"].map(function (i) {
					return "'rdf:type'=='" + i.id + "'" 
				}).join("||") + ")"
			: 
				"";
		var q = self.hasValue("v-fs:fulltextQuery") ? self["v-fs:fulltextQuery"][0] : "";
		if (q && q.indexOf("==") < 0) {
			q = "(" + q.trim().split(" ").map(function (t) { return "'*'=='" + t + "*'";}).join("&&") + ")";
		}
		return [type, q].filter(function (item) { return !!item }).join("&&");
	}
  """
.
v-fs:FulltextRequestTemplate
  rdf:type v-ui:ClassTemplate ;
  rdfs:label "Fulltext request class template"@en ;
  rdfs:label "Шаблон класса полнотекстовый запрос"@ru ;
  v-ui:forClass v-fs:FulltextRequest ;
  v-ui:template """
<div role="tabpanel">
	<h4 about="@" property="rdfs:label"></h4>
	<!-- Nav tabs -->
	<ul class="nav nav-tabs" role="tablist">
		<li role="presentation" class="active"><a id="params-pill-ft" href="#params-ft" about="v-fs:Params" property="rdfs:label" aria-controls="params-ft" role="tab" data-toggle="tab"></a></li>
		<li role="presentation"><a id="results-pill-ft" href="#results-ft" aria-controls="results-ft" role="tab" data-toggle="tab"><span href="#params-ft" about="v-fs:Results" property="rdfs:label"></span> <span class="badge" id="results-count">0</span></a></li>
		<li role="presentation"><a href="#mgmt-ft" about="v-fs:RequestMgmt" property="rdfs:label" aria-controls="mgmt-ft" role="tab" data-toggle="tab"></a></li>
	</ul>
	<br />
	<!-- Tab panes -->
	<div class="tab-content">
		<div role="tabpanel" class="tab-pane active" id="params-ft">
			<div class="not-found alert alert-warning" style="display: none">
				<strong about="v-fs:Empty" property="rdfs:label"></strong> <span about="v-fs:NothingFound" property="rdfs:label"></span>
			</div>
			<form role="form">
				<h4 about="v-fs:EnterQuery" property="rdfs:label"></h4>
				<div class="form-group">
					<div class="input-group">
						<veda-control id="fulltext" type="string" property="v-fs:fulltextQuery"></veda-control>
						<span class="input-group-btn">
							<button type="submit" id="submit" class="btn btn-primary" about="v-fs:Find" property="rdfs:label"></button>
						</span>
					</div>
				</div>
				<h4 about="v-fs:ChooseType" property="rdfs:label"></h4>
				<div rel="v-fs:typeToSearch" template="v-ui:ClassNameLabelTemplate"></div>
				<veda-control rel="v-fs:typeToSearch" type="link" class="fulltext dropdown"></veda-control>
			</form>
		</div>
		<div role="tabpanel" class="tab-pane" id="results-ft">
			<div class="not-found alert alert-warning" style="display: none">
				<strong about="v-fs:Empty" property="rdfs:label"></strong> <span about="v-fs:NothingFound" property="rdfs:label"></span>
			</div>
			<div id="search-results">
				<ol id="results-list"></ol>
				<div class="text-center">
					<ul class="pagination" id="pager"></ul>
					<br />
				</div>
			</div>
		</div>
		<div role="tabpanel" class="tab-pane" id="mgmt-ft">
			<p about="rdfs:label" property="rdfs:label" class="-view edit"></p>
			<veda-control type="string" property="rdfs:label" class="-view edit"></veda-control>
			<br>
			<div>
				<button type="button" class="action btn btn-primary view -edit" id="edit">Редактировать</button>
				<button type="button" class="action btn btn-success -view edit" id="save">Сохранить</button>
				<button type="button" class="action btn btn-link view -edit" id="delete">Удалить</button>
			</div>
		</div>
	</div>
</div>
<script>
	var self = individual,
		asp = veda.user.aspect,
		notFound = $(".not-found", template),
		params = $("a#params-pill-ft", template),
		results = $("a#results-pill-ft", template),
		pager = $("#pager", template),
		resultsList = $("#results-list", template),
		resultsCount = $("#results-count", template),
		submit = $("#submit", template),
		fulltext = $("#fulltext", template),
		form = new veda.IndividualModel();
	
	// Autofocus on query field
	params.on("shown.bs.tab", function () {
		if (!self.hasValue("v-fs:attributiveQuery")) {
			$("#fulltext", template).trigger("veda_focus");
		}
	});
	params.trigger("shown.bs.tab");
	
	// Enter on query field triggers search
	submit.click( function (e) {
		e.preventDefault();
		self.search();
	});
	
	// Define and clean handlers
	self.on("beforeSearch", beforeSearch);
	self.on("afterSearch", afterSearch);
	self.on("individual:afterSave", updateAspect);
	template.on("remove", function () {
		self.off("beforeSearch", beforeSearch);
		self.off("afterSearch", afterSearch);
		self.off("individual:afterSave", updateAspect);	
	});

	// Present results if query defined
	if (self.count) { self.trigger("afterSearch"); }

	// Update user aspect when search request was saved
	function updateAspect() {
		if (self["v-s:deleted"][0] == true) {
			asp["v-asp:hasRegistry"] = asp["v-asp:hasRegistry"].filter( function (i) { return i.id !== self.id;});
		} else if (
			!asp["v-asp:hasRegistry"].filter( function (i) {return i.id === self.id;}).length
		) {
			asp["v-asp:hasRegistry"] = asp["v-asp:hasRegistry"].concat(self);
		}
		asp.save();
	}
	
	function genericTemplate(individual) {
		var head = "<strong><a href='#/individual/@/#main' property='rdfs:label'></a></strong>";
		var allprops = Object.getOwnPropertyNames(individual.properties);
		var props = "<div>";
		for (var i = 0, uri; (uri = allprops && allprops[i]) && (i < 10); ++i) {
			if ( individual.hasValue(uri) ) {
				props += "<span about='" + uri + "' property='rdfs:label' class='text-muted'></span>: "
				if (individual[uri][0] instanceof veda.IndividualModel) {
					props += "<span about='@' rel='" + uri + "' template='v-ui:LabelLinkTemplate'></span>; "
				} else {
					props += "<span about='@' property='" + uri + "'></span>; "
				}
			}
		}
		props += "</div>";
		return "<span>" + head + props + "</span>";
	}
	
	// Present results
	function beforeSearch() {
		notFound.hide();
		resultsList.empty();
		pager.empty();
		resultsCount.text(0);
	}
	function afterSearch() {
		resultsList.empty();
		pager.empty();
		resultsCount.text(self.count);
		
		// Nothing found
		if (self.count === 0) {
			params.tab("show");
			notFound.show();

		// Render results
		} else {
			self.page = self.page || 0;
			if (self.count < self.page * veda.user.displayedElements) {
				self.page = Math.floor(self.count / veda.user.displayedElements) + 1 * (self.count % veda.user.displayedElements ? 1 : 0) - 1;
			}
			resultsList.attr("start", self.page * veda.user.displayedElements + 1);
			results.tab("show");
			
			for (var i = self.page * veda.user.displayedElements; i < (self.page + 1) * veda.user.displayedElements && i < self.count; i++) {
				(function (i) {
					setTimeout(function () {
						var container = $("<li>").appendTo(resultsList);
						var result = new veda.IndividualModel( self.result[i] );
						var tmpl = genericTemplate(result);
						result.present(container, tmpl);
					}, 0);
				}(i));
			}
			
			// Show pager
			for (var pg = 0; pg < Math.floor(self.count / veda.user.displayedElements) + 1 * (self.count % veda.user.displayedElements ? 1 : 0); pg++) {
				var $pg = $("<li/>")
					.attr("class", pg === self.page ? "active" : "")
					.appendTo(pager);
				var $a = $("<a/>", {
					"text" : pg + 1,
					"click": (function (pg) {
						if (pg === self.page) return $.noop;
						return function (event) {
							event.preventDefault();
							self.page = pg;
							self.trigger("afterSearch");
						}
					})(pg),
					"href" : ""
				}).appendTo($pg);
			}
		}
	}
</script>
  """
.
v-fs:AttributiveRequestModel
  rdf:type v-s:ClassModel ;
  rdfs:label "v-fs:AttributiveRequest class model"@en ;
  rdfs:label "Модель класса v-fs:AttributiveRequest"@ru ;
  v-ui:forClass v-fs:AttributiveRequest ;
  v-s:script """
	var mkQuery = veda.Util.queryFromIndividual;
	
	var self = individual,
		sort = self.hasValue("v-fs:sortOrder")      ? self["v-fs:sortOrder"][0] : undefined,
		databases = self.hasValue("v-fs:databases") ? self["v-fs:databases"][0] : undefined,
		reopen = self.hasValue("v-fs:reopen")       ? self["v-fs:reopen"][0]    : false,
		q;
	
	self.on("individual:propertyModified", function (property_uri, values) {
		switch (property_uri) {
			case "v-fs:typeToSearch": 
				self.form = new veda.IndividualModel();
				self.form["rdf:type"] = values.slice(0);
				for (var property_uri in self.properties) {
					if ( property_uri === "rdf:type" ||
						 property_uri === "v-s:author" ||
						 property_uri === "v-s:created" ||
						 property_uri === "v-s:deleted" ||
						 property_uri === "rdfs:label"
					) { continue; }
					if (self.form[property_uri]) { self.form[property_uri] = self[property_uri].slice(0); }
				}
				self.form.on("individual:propertyModified", handler);
				q = mkQuery(self.form);
				break;
			case "v-fs:sortOrder"   : sort = values.length      ? values[0].toString() : undefined; break;
			case "v-fs:databases"   : databases = values.length ? values[0].toString() : undefined; break;
			case "v-fs:reopen"      : reopen = values.length    ? values[0].toString() : false; break;
		}
	});

	if (self.hasValue("v-fs:typeToSearch")) {
		self.trigger("individual:propertyModified", "v-fs:typeToSearch", self["v-fs:typeToSearch"]);
	}

	function handler(property_uri, values) {
		if ( property_uri !== "rdf:type" &&
			 property_uri !== "v-s:author" &&
			 property_uri !== "v-s:created" &&
			 property_uri !== "v-s:deleted" &&
			 property_uri !== "rdfs:label"
		) { 
			if (!self[property_uri]) self.defineProperty(property_uri);
			self[property_uri] = values.slice(0);
			q = mkQuery(self.form);
		}
	}
	
	self.result  = [];
	self.count  = 0;
	self.selected = [];
	self.search = function () {
		self.trigger("beforeSearch");
		self.result = query(veda.ticket, q, sort, databases, reopen);
		self.count = self.result.length;
		self.trigger("afterSearch");
		return self.result;
	};
	// Search if query defined
	if (q) { self.search() };
  """
.
v-fs:AttributiveRequestTemplate
  rdf:type v-ui:ClassTemplate ;
  rdfs:label "v-fs:AttributiveRequest class template"@en ;
  rdfs:label "Шаблон класса v-fs:AttributiveRequest"@ru ;
  v-ui:forClass v-fs:AttributiveRequest ;
  v-ui:template """
<div role="tabpanel">
	<h4 about="@" property="rdfs:label"></h4>
	<!-- Nav tabs -->
	<ul class="nav nav-tabs" role="tablist">
		<li role="presentation" class="active"><a id="params-pill-at" href="#params-at" about="v-fs:Params" property="rdfs:label" aria-controls="params-at" role="tab" data-toggle="tab"></a></li>
		<li role="presentation"><a id="results-pill-at" href="#results-at" aria-controls="results-at" role="tab" data-toggle="tab"><span href="#params-at" about="v-fs:Results" property="rdfs:label"></span> <span class="badge" id="results-count">0</span></a></li>
		<li role="presentation"><a href="#mgmt-at" about="v-fs:RequestMgmt" property="rdfs:label" aria-controls="mgmt-at" role="tab" data-toggle="tab"></a></li>
	</ul>
	<br />
	<!-- Tab panes -->
	<div id="not-found" class="alert alert-warning" style="display: none">
		<strong about="v-fs:Empty" property="rdfs:label"></strong> <span about="v-fs:NothingFound" property="rdfs:label"></span>
	</div>
	<div class="tab-content">
		<div role="tabpanel" class="tab-pane active" id="params-at">
			<h4 about="v-fs:ChooseType" property="rdfs:label"></h4>
			<veda-control rel="v-fs:typeToSearch" type="link" class="fulltext dropdown"></veda-control>
			<br>
			<div id="form-holder"></div>
			<button type="button" id="find" class="btn btn-primary" about="v-fs:Find" property="rdfs:label"></button>
		</div>
		<div role="tabpanel" class="tab-pane" id="results-at">
			<div class="container-fluid" id="search-results">
				<ol id="results-list"></ol>
				<div class="text-center">
					<ul class="pagination" id="pager"></ul>
					<br />
				</div>
			</div>
		</div>
		<div role="tabpanel" class="tab-pane" id="mgmt-at">
			<p about="rdfs:label" property="rdfs:label" class="-view edit"></p>
			<veda-control type="string" property="rdfs:label" class="-view edit"></veda-control>
			<br>
			<div>
				<button type="button" class="action btn btn-primary view -edit" id="edit">Редактировать</button>
				<button type="button" class="action btn btn-success -view edit" id="save">Сохранить</button>
				<button type="button" class="action btn btn-link view -edit" id="delete">Удалить</button>
			</div>
		</div>
	</div>
</div>
<script>
	var self = individual,
		asp = veda.user.aspect,
		notFound = $("#not-found", template),
		params = $("a#params-pill-at", template),
		results = $("a#results-pill-at", template),
		pager = $("#pager", template),
		resultsList = $("#results-list", template),
		resultsCount = $("#results-count", template),
		find = $("#find", template),
		fulltext = $("#fulltext", template),
		formHolder = $("#form-holder", template);
	
	// Autofocus on query field
	params.on("shown.bs.tab", function () {
		if (!self.hasValue("v-fs:attributiveQuery")) {
			$("#fulltext", template).trigger("veda_focus");
		}
	});
	params.trigger("shown.bs.tab");
	
	// Enter on query field triggers search
	find.click( function (e) {
		e.preventDefault();
		self.search();
	});
	
	// Define and clean handlers
	self.on("beforeSearch", beforeSearch);
	self.on("afterSearch", afterSearch);
	self.on("individual:afterSave", updateAspect);
	self.on("individual:propertyModified", showForm);
	template.on("remove", function () {
		self.off("beforeSearch", beforeSearch);
		self.off("afterSearch", afterSearch);
		self.off("individual:afterSave", updateAspect);	
		self.off("individual:propertyModified", showForm);
	});

	// Present results if query defined
	if (self.count) { self.trigger("afterSearch"); }

	// Present form if defined
	if (self.form) { self.form.present(formHolder, undefined, "search"); }
	
	function showForm(property_uri) {
		if (property_uri === "v-fs:typeToSearch") {
			self.form.present(formHolder, undefined, "search");
		}
	}

	// Update user aspect when search request was saved
	function updateAspect() {
		if (self["v-s:deleted"][0] == true) {
			asp["v-asp:hasRegistry"] = asp["v-asp:hasRegistry"].filter( function (i) { return i.id !== self.id;});
		} else if (
			!asp["v-asp:hasRegistry"].filter( function (i) {return i.id === self.id;}).length
		) {
			asp["v-asp:hasRegistry"] = asp["v-asp:hasRegistry"].concat(self);
		}
		asp.save();
	}
	
	function genericTemplate(individual) {
		var head = "<strong><a href='#/individual/@/#main' property='rdfs:label'></a></strong>";
		var allprops = Object.getOwnPropertyNames(individual.properties);
		var props = "<div>";
		for (var i = 0, uri; (uri = allprops && allprops[i]) && (i < 10); ++i) {
			if ( individual.hasValue(uri) ) {
				props += "<span about='" + uri + "' property='rdfs:label' class='text-muted'></span>: "
				if (individual[uri][0] instanceof veda.IndividualModel) {
					props += "<span about='@' rel='" + uri + "' template='v-ui:LabelLinkTemplate'></span>; "
				} else {
					props += "<span about='@' property='" + uri + "'></span>; "
				}
			}
		}
		props += "</div>";
		return "<span>" + head + props + "</span>";
	}
	
	// Present results
	function beforeSearch() {
		notFound.hide();
		resultsList.empty();
		pager.empty();
		resultsCount.text(0);
	}
	function afterSearch() {
		resultsList.empty();
		pager.empty();
		resultsCount.text(self.count);
		
		// Nothing found
		if (self.count === 0) {
			params.tab("show");
			notFound.show();

		// Render results
		} else {
			self.page = self.page || 0;
			if (self.count < self.page * veda.user.displayedElements) {
				self.page = Math.floor(self.count / veda.user.displayedElements) + 1 * (self.count % veda.user.displayedElements ? 1 : 0) - 1;
			}
			resultsList.attr("start", self.page * veda.user.displayedElements + 1);
			results.tab("show");
			
			for (var i = self.page * veda.user.displayedElements; i < (self.page + 1) * veda.user.displayedElements && i < self.count; i++) {
				(function (i) {
					setTimeout(function () {
						var container = $("<li>").appendTo(resultsList);
						var result = new veda.IndividualModel( self.result[i] );
						var tmpl = genericTemplate(result);
						result.present(container, tmpl);
					}, 0);
				}(i));
			}
			
			// Show pager
			for (var pg = 0; pg < Math.floor(self.count / veda.user.displayedElements) + 1 * (self.count % veda.user.displayedElements ? 1 : 0); pg++) {
				var $pg = $("<li/>")
					.attr("class", pg === self.page ? "active" : "")
					.appendTo(pager);
				var $a = $("<a/>", {
					"text" : pg + 1,
					"click": (function (pg) {
						if (pg === self.page) return $.noop;
						return function (event) {
							event.preventDefault();
							self.page = pg;
							self.trigger("afterSearch");
						}
					})(pg),
					"href" : ""
				}).appendTo($pg);
			}
		}
	}
</script>
  """
.
v-fs:SearchMembership
  rdf:type v-s:Membership ;
  v-s:memberOf v-a:ReadResGroup ;
  v-s:resource v-fs:Search ;
.
