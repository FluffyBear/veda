# baseURI: http://semantic-machines.com/veda/veda-ui
# imports: http://semantic-machines.com/veda/veda-schema
# imports: http://www.w3.org/1999/02/22-rdf-syntax-ns#
# imports: http://www.w3.org/2000/01/rdf-schema#
# imports: http://www.w3.org/2002/07/owl

# c14n-version: 3
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix v-s: <http://semantic-machines.com/veda/veda-schema/> .
@prefix v-ui: <http://semantic-machines.com/veda/veda-ui/> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix v-fs: <http://semantic-machines.com/veda/veda-function-search/> .

<http://semantic-machines.com/veda/veda-function-search>
  rdf:type owl:Ontology ;
  rdfs:label "Veda system search function ontology"@en ;
  rdfs:label "Онтология фукнции поиска системы Веда"@ru ;
  owl:imports <http://semantic-machines.com/veda/veda-schema> ;
  owl:imports <http://semantic-machines.com/veda/veda-ui> ;
  owl:imports rdf: ;
  owl:imports rdfs: ;
  owl:imports <http://www.w3.org/2002/07/owl> ;
#  owl:versionInfo "0.2" ;
.

########## SEARCH FUNCTION ###########

v-fs:Search
  rdf:type owl:Class ;
  rdfs:label "Search"@en ;
  rdfs:label "Поиск"@ru ;
  rdfs:subClassOf owl:Thing ;
.
v-fs:Search1
  rdf:type v-fs:Search ;
  rdfs:label "Search1"@en ;
  rdfs:label "Поиск1"@ru ;
  v-fs:q "'rdf:type'=='v-s:Person'"^^xsd:string ;
.
v-fs:q
  rdf:type owl:DatatypeProperty ;
  rdfs:label "query"@en ;
  rdfs:label "запрос"@ru ;
  rdfs:domain v-fs:Search ;
  rdfs:range xsd:string ;
.
v-fs:queryPrefix
  rdf:type owl:DatatypeProperty ;
  rdfs:label "query prefix"@en ;
  rdfs:label "префикс запроса"@ru ;
  rdfs:domain v-fs:Search ;
  rdfs:range xsd:string ;
.
v-fs:sort
  rdf:type owl:DatatypeProperty ;
  rdfs:label "sort"@en ;
  rdfs:label "упорядочить"@ru ;
  rdfs:domain v-fs:Search ;
  rdfs:range xsd:string ;
.

v-fs:selectedType
  rdf:type owl:ObjectProperty ;
  rdfs:label "выбранный тип"@ru ;
  rdfs:label "selected type"@en ;
  rdfs:domain v-fs:Search ;
  rdfs:range owl:Class ;
.

v-fs:SelectedTypeSpec
  rdf:type v-ui:ObjectPropertySpecification ;
  rdfs:label "Спецификация свойства v-fs:selectedType для класса v-fs:Search"@ru ;
  rdfs:label "v-fs:selectedType property specification for class v-fs:Search"@en ;
  v-ui:forClass v-fs:Search ;
  v-ui:forProperty v-fs:selectedType ;
  v-ui:tooltip "Ссылка на объект класса Класс."@ru ;
  v-ui:tooltip "Link to instance of Class class"@en ;
  v-ui:queryPrefix "('rdf:type'=='owl:Class')"^^xsd:string ;
  v-ui:immutable "false"^^xsd:boolean ;
.

v-fs:SearchModel
  rdf:type v-s:ClassModel ;
  rdfs:label "Search class model"@en ;
  rdfs:label "Модель класса Поиск"@ru ;
  v-ui:forClass v-fs:Search ;
  v-s:script """
	var self = individual;
	var results_keys;	

	self.selectedType = {};
	self.q = "";
	self.queryPrefix = "";
	self.sort = "";
	self.selected = {};
	self.results = {};
	self.results_count = undefined;
	self.query_time = undefined;
	
	// Define Model functions
	self.toggleSelected = function (i) {
		if (!self.results[ results_keys[i] ]) return self.selected;
		if (self.results[ results_keys[i] ].id in self.selected) {
			delete self.selected[self.results[ results_keys[i] ].id];
		} else {
			self.selected[self.results[ results_keys[i] ].id] = self.results[ results_keys[i] ];
		}
		self.trigger("search:selected", self.results[ results_keys[i] ], self.selected);
		return self.selected;
	}

	self.toggleAll = function () {
		if (Object.keys(self.selected).length != self.results_count) {
			for (var i=0; i < self.results_count; i++) {
				self.selected[self.results[ results_keys[i] ].id] = self.results[ results_keys[i] ];
			}
		} else {
			self.selected = {};
		}
		return self.selected;
	}
	
	self.search = function (q, databases, reopen) {
		reopen = !!reopen;
		self["v-fs:q"] = q ? [ q ] : self["v-fs:q"];
		q = self["v-fs:q"][0];
				
		// Clear previous results 
		self.results = {}; 
		self.selected = {};
		self.query_time = 0;
		var t1 = Date.now();

		// Transform user input like "roman karpov" to "'*'=='roman' && '*'=='karpov'"
		if (q && q.indexOf("==") < 0) {
			q = "(" + q.trim().split(" ").map(function (t) { return "'*'=='" + t + "*'"}).join("&&") + ")";
		}

		// Prefix query if defined
		q = ( self.hasValue("v-fs:queryPrefix") ? self["v-fs:queryPrefix"][0] + "&&" : "") + (q ? q : "") ;

		var results = query(veda.ticket, q, self.sort, databases, reopen);

		var t2 = Date.now();
		self.query_time = t2 - t1;
		for (var i in results) {
			(function(i){
				Object.defineProperty(self.results, results[i], {
					get: function () { 
						if (typeof results[i] == 'object') return results[i];
						var cache = !reopen;
						return results[i] = new veda.IndividualModel(results[i], undefined, undefined, undefined, cache);
					},
					enumerable: true,
					configurable: true
				});
			})(i);
		}
		self.results_count = results.length;
		results_keys = Object.getOwnPropertyNames(self.results);

		self.trigger("search:complete");
	};
	
	// Search if params given
	if ( self.hasValue("v-fs:q") || self.hasValue("v-fs:queryPrefix") ) self.search();
	
  """
.
v-fs:SearchTemplate
  rdf:type v-ui:ClassTemplate ;
  rdfs:label "Search class template"@en ;
  rdfs:label "Шаблон класса поиск"@ru ;
  v-ui:forClass v-fs:Search ;
  v-ui:template """
	<div>
		<div role="tabpanel" id="srch-tab-panel" class="panel panel-default">
			<div class="panel-body">
				<!-- Nav tabs -->
				<ul class="nav nav-pills" role="tablist">
					<li role="presentation" class="disabled"><a about="@" property="rdfs:label"></a></li>
					<li role="presentation" class="active"><a id="params-pill" href="#params" aria-controls="params" role="tab" data-toggle="tab">Параметры</a></li>
					<li role="presentation"><a id="results-pill" href="#results" aria-controls="results" role="tab" data-toggle="tab">Результаты <span class="badge" id="results-count">0</span></a></li>
					<li role="presentation" class="disabled">
						<a id="timing-pill" style="display:none">
							<small><small>
								<span><strong>timing: </strong>search query time = <span id="query_time"></span> ms | get request count = <span id="get_count"></span> | get summary time = <span id="get_summary_time"></span> ms | total render time = <span id="render_time"></span> ms </span>
							</small></small>
						</a>
					</li>
				</ul>
				<br />
				<!-- Tab panes -->
				<div class="tab-content">
					<div role="tabpanel" class="tab-pane active" id="params">
						<div class="well">
							<div class="container-fluid">
								<form role="form" class="form-horizontal">
									<div class="input-group">
										<input type="text" class="form-control" id="q"/>
										<span class="input-group-btn" id="q-actions">
											<button type="submit" id="srch-submit" class="btn btn-primary">Найти</button>
										</span>
									</div>
								</form>
							</div>
						</div>
						<div class="alert alert-warning not-found" style="display: none">
							<strong>Пусто!</strong> <span>По вашему запросу ничего не найдено. Пожалуйста, учточните запрос.</span>
						</div>
						<strong about="v-fs:selectedType" property="rdfs:label"></strong>
						<div rel="v-fs:selectedType" template="v-ui:ClassNameLabelTemplate"></div>
						<br />
					</div>
					<div role="tabpanel" class="tab-pane" id="results">
						<div class="container-fluid" id="search-results">
							<ol id="search-results-list"></ol>
							<hr/>
							<div class="text-center">
								<ul class="pagination" id="pager"></ul>
								<br />
							</div>
						</div>
						<div class="alert alert-warning not-found" style="display: none">
							<strong>Пусто!</strong> <span>По вашему запросу ничего не найдено. Пожалуйста, учточните запрос.</span>
						</div>
					</div>
				</div>
				<button id="save" class="btn btn-success">Сохранить</button>
				<button id="save-as" class="btn btn-success">Сохранить как...</button>
			</div>
		</div>
		<script>
			var self = individual;
			var q = $("#q", template);
			var save = $("#save", template);
			var saveAs = $("#save-as", template);
			var params = $("#params", template);
			var results = $("#results", template);
			var srchSubmit = $("#srch-submit", template);
			var searchResults = $("#search-results", template);
			var searchResultsList = $("#search-results-list", template);
			var notFound = $(".not-found", template);
			var paramsPill = $("#params-pill", template);
			var resultsPill = $("#results-pill", template);
			var resultsCount = $("#results-count", template);
			var timingPill = $("#timing-pill", template);
			var $query_time = $("#query_time", template);
			var $render_time = $("#render_time", template);
			var $_get_count = $("#get_count", template);
			var $_get_summary_time = $("#get_summary_time", template);
			var pager = $("#pager", template);
			
			if (self.hasValue("v-fs:q")) {
				q.val(self["v-fs:q"][0]);
			}
			q.change(function () {
				self["v-fs:q"] = [ q.val() ];
			});
			srchSubmit.click( function (e) {
				e.preventDefault();
				self.search();
			});
			save.click(function () {
				self.save();
			});
			saveAs.click(function () {
				var name = window.prompt("Введите имя запроса");
				if (name === null) { 
					return;
				} else if (!name) {
					alert("Ошибка, не задано имя запроса");
				} else {
					var clone = new veda.IndividualModel(self.clone(), container);
					clone["rdfs:label"] = [name];
					clone.save();
				}
			});

			
			self.on("search:complete", searchCompleteHandler);
			template.on("remove", function () {
				self.off("search:complete", searchCompleteHandler);
			});
			
			if ( self.results_count ) self.trigger("search:complete");
			
			function searchCompleteHandler() {
				
				var rt1, rt2, render_time, gc1, gc2, _get_count, gst1, gst2, _get_summary_time;
				rt1 = Date.now();
				gc1 = get_count;
				gst1 = get_summary_time;
				
				//self.currentPage = (typeof page === 'number' ? page : self.currentPage) || 0;
				self.currentPage = self.currentPage || 0;
				
				if (self.results_count < self.currentPage * veda.user.displayedElements) 
					self.currentPage = Math.floor(self.results_count / veda.user.displayedElements) + 1 * (self.results_count % veda.user.displayedElements ? 1 : 0) - 1;
				
				// Show/hide 'results' or 'not found'
				if (!self.hasValue("v-fs:q") && !self.hasValue("v-fs:queryPrefix")) {
					q.focus();
					paramsPill.tab("show");
					notFound.hide();
					return;
				} else if ((self.q || self.queryPrefix) && !self.results_count) {
					q.focus();
					paramsPill.tab("show");
					notFound.show();
					return;
				} else {
					resultsPill.tab("show");
					resultsCount.html(self.results_count);
				}
				
				notFound.hide();
				resultsPill.tab("show");
				searchResultsList
					.empty()
					.attr("start", self.currentPage * veda.user.displayedElements + 1);
				pager.empty();
				
				
				// Show results
				var keys = Object.getOwnPropertyNames(self.results);
				for (var i = self.currentPage * veda.user.displayedElements; i < (self.currentPage + 1) * veda.user.displayedElements && i < self.results_count; i++) {
					(function (i) { 
						setTimeout(function () {

							var $li = $("<li/>").appendTo( searchResultsList );

							// Select search results 
							//var $select = $( $("#search-select-template").html() );
							//$("input[type='checkbox']", $select).on("click", function (e) {
							//	self.toggleSelected(i);
							//});
							//$li.append( $select );
							
							var search_result = new veda.SearchResultModel(self.results[ keys[i] ], $li);
							//if (search_result.id in self.selected) $("input", $select).attr("checked", "checked");
						
							if (i == self.results_count - 1 || i == (self.currentPage + 1) * veda.user.displayedElements - 1) {
								$query_time.text(self.query_time);
								rt2 = Date.now();
								render_time = rt2 - rt1;
								$render_time.text(render_time);
								gc2 = get_count;
								_get_count = gc2 - gc1;
								$_get_count.text(_get_count);
								gst2 = get_summary_time;
								_get_summary_time = gst2 - gst1;
								$_get_summary_time.text(_get_summary_time);
								timingPill.show();
							}
							
						}, 0);
					}(i));
				}
				
				// Show pager
				for (var page = 0; page < Math.floor(self.results_count / veda.user.displayedElements) + 1 * (self.results_count % veda.user.displayedElements ? 1 : 0); page++) {
					var $page = $("<li/>")
						.attr("class", page == self.currentPage ? "active" : "")
						.appendTo(pager);
					var $a = $("<a/>", {
						"text" : page + 1, 
						"click": (function (page) {
							if (page == self.currentPage) return $.noop;
							return function (event) {
								event.preventDefault(); 
								self.currentPage = page;
								self.trigger("search:complete");
							}
						})(page), 
						"href" : ""
					}).appendTo($page);
				}
				
			}
		</script>
	</div>
  """
.

