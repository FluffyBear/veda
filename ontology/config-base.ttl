@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix v-wf: <http://semantic-machines.com/veda/veda-workflow/> .
@prefix v-s: <http://semantic-machines.com/veda/veda-schema/> .
@prefix v-ui: <http://semantic-machines.com/veda/veda-ui/> .
@prefix v-l: <http://semantic-machines.com/veda/veda-layout/> .
@prefix m-l: <http://semantic-machines.com/veda/mondi-layout/> .
@prefix cfg: <http://semantic-machines.com/veda/config/> .
@prefix td: <http://semantic-machines.com/veda/test-data/> .

@prefix cfgb: <http://semantic-machines.com/veda/config-base/> .
<http://semantic-machines.com/veda/config-base>
  rdf:type owl:Ontology ;
  rdfs:label "Veda system administrator ontology"@en ;
  rdfs:label "Онтология администратора системы Веда"@ru ;
#  owl:versionInfo "1.0" ;
  v-s:loadPriority 2 ;
.

cfg:Guest
  rdf:type v-s:Person ;
  v-s:author cfg:VedaSystem ;  
  v-s:firstName "Guest"@en ;
  v-s:firstName "Гость"@ru ;
  v-s:hasAccount cfg:GuestAccount ;
  rdfs:label "Guest"@en ;
  rdfs:label "Гость"@ru ;
.

cfg:GuestAccount
  rdf:type v-s:Account ;
  rdfs:label "Guest account"@en ;
  rdfs:label "Гостевая учетная запись"@ru ;
.

cfg:VedaSystem
  rdf:type v-s:Person ;
  v-s:author cfg:VedaSystem ;  
  v-s:actualVersion cfg:VedaSystem ;
  v-s:birthday "2014-03-05"^^xsd:dateTime ;
  v-s:firstName "Veda"@en ;
  v-s:firstName "Веда"@ru ;
  v-s:hasAccount cfg:VedaSystemAccount ;
  v-s:lastName "System"@en ;
  v-s:lastName "Система"@ru ;
  rdfs:label "Veda System"@en ;
  rdfs:label "Система Веда"@ru ;
.

cfg:VedaSystemAccount
  rdf:type v-s:Account ;
  v-s:author cfg:VedaSystem ;
  v-s:login "veda" ;
  v-s:password "4d1af0e10dab5fe07ae8d23bad5650b46804fb110cfb92f119213bc86aa03d34" ;
  v-s:owner cfg:VedaSystem ;
  rdfs:label "Veda System account"@en ;
  rdfs:label "Учетная запись системы Веда"@ru ;
.

cfg:SuperAdmin
  rdf:type v-s:Group ;
  v-s:author cfg:VedaSystem ;  
  rdfs:label "Super admin"@en ;
  rdfs:label "Супер админ"@ru ;
.

cfg:TTLResourcesGroup
  rdf:type v-s:Group ;
  v-s:author cfg:VedaSystem ;
  rdfs:label "TTL resources group"@en ;
  rdfs:label "Группа всех ресурсов из TTL"@ru ;
.

cfg:AllUsersGroup
  rdf:type v-s:Group ;
  v-s:author cfg:VedaSystem ;
  rdfs:label "All users group"@en ;
  rdfs:label "Группа всех пользователей"@ru ;
.

cfg:OntologyGroup
  rdf:type v-s:Group ;
  v-s:author cfg:VedaSystem ;
  rdfs:label "Group for Ontology individuals"@en ;
  rdfs:label "Группа для индивидов онтологии"@ru ;
.

cfg:OrgGroup
  rdf:type v-s:Group ;
  v-s:author cfg:VedaSystem ;
  rdfs:label "Group for organization structure individuals"@en ;
  rdfs:label "Группа для индивидов организационной структуры"@ru ;
.

cfg:Membership_1
  rdf:type v-s:Membership ;
  v-s:author cfg:VedaSystem ;
  v-s:resource cfg:VedaSystem ;
  v-s:memberOf cfg:SuperAdmin ;
.

cfg:Permission_1
  rdf:type v-s:PermissionStatement ;
  v-s:author cfg:VedaSystem ;  
  v-s:permissionSubject cfg:SuperAdmin ;
  v-s:permissionObject v-s:AllResourcesGroup ;
  v-s:canCreate "true"^^xsd:boolean ;
  v-s:canDelete "true"^^xsd:boolean ;
  v-s:canRead "true"^^xsd:boolean ;
  v-s:canUpdate "true"^^xsd:boolean ;
.

cfg:Permission_2
  rdf:type v-s:PermissionStatement ;
  v-s:author cfg:VedaSystem ;
  v-s:permissionSubject cfg:AllUsersGroup ;
  v-s:permissionObject cfg:TTLResourcesGroup ;
  v-s:canRead "true"^^xsd:boolean ;
  rdfs:label "Permissions to read TTL resources for all users"@en ;
  rdfs:label "Право на чтение всех ресурсов из TTL для всех пользователей"@ru ;
.

cfg:Permission_3
  rdf:type v-s:PermissionStatement ;
  v-s:author cfg:VedaSystem ;
  v-s:permissionSubject cfg:AllUsersGroup ;
  v-s:permissionObject cfg:OntologyGroup ;
  v-s:canRead "true"^^xsd:boolean ;
  rdfs:label "Permission to read ontology individuals for all users"@en ;
  rdfs:label "Разрешение на чтение онтологии для всех пользователей"@ru ;
.

cfg:Permission_4
  rdf:type v-s:PermissionStatement ;
  v-s:author cfg:VedaSystem ;
  v-s:permissionSubject cfg:AllUsersGroup ;
  v-s:permissionObject cfg:OrgGroup ;
  v-s:canRead "true"^^xsd:boolean ;
  rdfs:label "Permission to read org. structure individuals for all users"@en ;
  rdfs:label "Разрешение на чтение орг. структуры для всех пользователей"@ru ;
.

##################### EVENT HANDLERS #####################


cfg:Event_TTL
  rdf:type v-s:Event ;
  v-s:author cfg:VedaSystem ;
  rdfs:label "скрипт помещает все индивиды в группу cfg:TTLResourcesGroup";
  rdfs:comment "скрипт помещает все индивиды в группу cfg:TTLResourcesGroup";
  v-s:script """
/* Available variables:
 * ticket = superuser ticket
 * document = captured document
 * user_uri = user whose actions triggered event
 * prev_state = user whose actions triggered event
 * _event_id = id of the event to prevent cycles in triggers. Must be passed to every function that modifies DB.
 * parent_script_id = id of the parent script that triggered this event.
 * parent_document_id = id of the document that triggered this event.
 */
var uri = document['@'],
	isDefinedBy = document['rdfs:isDefinedBy'];
if ( !isDefinedBy ) return;
membership = {
	'@' : genUri(), 
	'rdf:type' : [{data: 'v-s:Membership', type : _Uri}],
	'v-s:memberOf' : [{data: 'cfg:TTLResourcesGroup', type : _Uri}],
	'v-s:resource'  : [{data: uri, type : _Uri}],
	'rdfs:comment'  : [{data: 'создано автоматически в обработчике cfg:Event_TTL', type : _String}],
};
put_individual(ticket, membership, _event_id);
  """ ;
.


cfg:Event_0
  rdf:type v-s:Event ;
  v-s:author cfg:VedaSystem ;
  rdfs:label "скрипт привязки человека к группам орг. структуры";
  rdfs:comment "скрипт привязки человека к группам орг. структуры";
  v-s:filter v-s:Appointment ;
  v-s:script """
/* Available variables:
 * ticket = superuser ticket
 * document = captured document
 * user_uri = user whose actions triggered event
 * prev_state = user whose actions triggered event
 * _event_id = id of the event to prevent cycles in triggers. Must be passed to every function that modifies DB.
 * parent_script_id = id of the parent script that triggered this event.
 * parent_document_id = id of the document that triggered this event.
 */

if (parent_document_id && parent_document_id === document['@']) return;

var doc = document,
	person_uri = getUri(document['v-s:employee']),
	position_uri = getUri(document['v-s:occupation']),
	add = true;

if (!person_uri || !position_uri) return;

if (document['v-s:deleted'] && document['v-s:deleted'][0] && document['v-s:deleted'][0].data === true) {
	add = false;
}

hierGroup(person_uri, position_uri, add);

function hierGroup(person_uri, unit_uri, add) {
	var uri = 'd:membership_' + person_uri.split(':').join('_') + '_' + unit_uri.split(':').join('_'),
		membership = {
		'@' : uri, 
		'rdf:type' : [{data: 'v-s:Membership', type : _Uri}],
		'v-s:memberOf' : [{data: unit_uri, type : _Uri}],
		'v-s:resource'  : [{data: person_uri, type : _Uri}],
		'rdfs:comment'  : [{data: 'создано автоматически в обработчике cfg:Event_0', type : _String}],
	};
	if (!add) {
		membership['v-s:deleted'] = [{data: true, type : _Boolean}];
	}
	put_individual (ticket, membership, _event_id);

	var unit = get_individual(ticket, unit_uri);
	if (unit) {
		var parent_uri = getUri(unit["v-s:parentUnit"]);
		if (parent_uri) {
			hierGroup(person_uri, parent_uri, add);
		}
	}
};
  """
.

cfg:Event_1
  rdf:type v-s:Event ;
  v-s:author cfg:VedaSystem ;
  rdfs:label "скрипт автоматической выдачи прав авторам (v-s:author) и владельцам (v-s:owner)";
  rdfs:comment "скрипт автоматической выдачи прав авторам (v-s:author) и владельцам (v-s:owner)";
  v-s:script """
/* Available variables:
 * ticket = superuser ticket
 * document = captured document
 * user_uri = user whose actions triggered event
 * prev_state = user whose actions triggered event
 * _event_id = id of the event to prevent cycles in triggers. Must be passed to every function that modifies DB.
 * parent_script_id = id of the parent script that triggered this event.
 * parent_document_id = id of the document that triggered this event.
 */

var doc_uri = document['@'],
	vs_owner = document['v-s:owner'];

if (vs_owner) {
	addRight(ticket, [can_read, can_update, can_delete], getUri(vs_owner), doc_uri);
}

var vs_author = document["v-s:author"];
if (vs_author) {
    var author = get_individual(ticket, getUri(vs_author));
    if (author) {
		
		var author_type = getUri(author['rdf:type']);
		
		if (author_type == 'v-s:Person') {
			addRight(ticket, [can_read, can_update, can_delete], getUri(vs_author), doc_uri); 
		} else {
			var ff = get_property_chain (ticket, document, 'v-s:author', 'v-s:occupation');
			if (ff) {
				var position_uri = getUri (ff['field']);
				var first_doc = ff['first'];
				if (first_doc) {
					doc_uri = first_doc['@'];	
					if (position_uri) {
						addRight(ticket, [can_read, can_update, can_delete], position_uri, doc_uri);
					}
				}
			}
		}
    }
}
  """ ;
.

cfg:Event_1_1
  rdf:type v-s:Event ;
  v-s:author cfg:VedaSystem ;
  rdfs:label "Скрипт создания журнала документа" ;
  rdfs:comment "Скрипт создания журнала документа" ;
  v-s:filter v-s:Journaling ;
  v-s:script """
/* Available variables:
 * ticket = superuser ticket
 * document = captured document
 * user_uri = user whose actions triggered event
 * prev_state = user whose actions triggered event
 * _event_id = id of the event to prevent cycles in triggers. Must be passed to every function that modifies DB.
 * parent_script_id = id of the parent script that triggered this event.
 * parent_document_id = id of the document that triggered this event.
 */

// No journaling for technical changes 
// No journaling for draft
if (!(document['v-s:isDraftOf'] && document['v-s:isDraftOf'].length > 0 || (document['v-s:hasDraft'] && document['v-s:hasDraft'].length > 0)) && !isTecnicalChange(document, prev_state))
{
    var author_uri = getUri(document['v-s:author']);
    if (!author_uri) { return; }

    var author = get_individual(ticket, author_uri);
    if (!author) { return; }

    var employee_uri;
    if (isExists(author['rdf:type'], newUri('v-s:Appointment')))
    {
        employee_uri = author['v-s:employee'];
        if (!employee_uri) { return; }
    }
    else
    {
        employee_uri = author_uri;
    }

    if (!employee_uri) { return; }

    var journal_uri = getJournalUri(document['@']);
    var exist_journal = get_individual(ticket, journal_uri);
    if (exist_journal)
    {
        // UPDATE DOCUMENT
        var journal_record = newJournalRecord(journal_uri);
        if (document['v-s:actualVersion'] && document['v-s:actualVersion'][0].data == document['@'])
        {
            journal_record['v-s:documentVersion'] = document['v-s:previousVersion'];
        }

        if ((!prev_state['v-s:deleted'] || prev_state['v-s:deleted'].data == 'false') &&
            (document['v-s:deleted'] && document['v-s:deleted'].data == 'true'))
        {
            journal_record['rdf:type'] = [
            {
                data: 'v-s:DocumentDeleted',
                type: _Uri
            }];
        }
        else
        {
            journal_record['rdf:type'] = [
            {
                data: 'v-s:DocumentUpdated',
                type: _Uri
            }];
        }

        journal_record['v-s:actor'] = [
        {
            data: user_uri,
            type: _Uri
        }];

        logToJournal(ticket, journal_uri, journal_record);
        addRight(ticket, [can_read], 'cfg:AllUsersGroup', journal_record['@']);
    }
    else
    {
        // CREATE DOCUMENT		
        var new_journal = {
            '@': journal_uri,
            'rdf:type': [
            {
                data: 'v-s:Journal',
                type: _Uri
            }],
            'v-s:onDocument': [
            {
                data: document['@'],
                type: _Uri
            }],
            'v-s:actor': [
            {
                data: user_uri,
                type: _Uri
            }]
        };
        put_individual(ticket, new_journal, _event_id);
        addRight(ticket, [can_read], 'cfg:AllUsersGroup', journal_uri);

        var journal_record = newJournalRecord(new_journal);
        if (document['v-s:actualVersion'] && document['v-s:actualVersion'][0].data == document['@'])
        {
            journal_record['v-s:documentVersion'] = document['v-s:previousVersion'];
        }
        journal_record['rdf:type'] = [
        {
            data: 'v-s:DocumentCreated',
            type: _Uri
        }];
        journal_record['v-s:actor'] = [
        {
            data: user_uri,
            type: _Uri
        }];
        logToJournal(ticket, journal_uri, journal_record);
        addRight(ticket, [can_read], 'cfg:AllUsersGroup', journal_record['@']);
    }
}
  """ ;
.

cfg:Event_2
  rdf:type v-s:Event ;
  v-s:author cfg:VedaSystem ;
  rdfs:label "скрипт автоматической выдачи прав на чтение для орг. структуры + перенос атрибута v-s:deleted" ;
  rdfs:comment "скрипт автоматической выдачи прав на чтение для орг. структуры + перенос атрибута v-s:deleted" ;
  v-s:filter v-s:Organization ;
  v-s:filter v-s:Department ;
  v-s:filter v-s:Position ;
  v-s:filter v-s:Appointment ;
  v-s:filter v-s:Person ;
  v-s:script """
/* Available variables:
 * ticket = superuser ticket
 * document = captured document
 * user_uri = user whose actions triggered event
 * prev_state = user whose actions triggered event
 * _event_id = id of the event to prevent cycles in triggers. Must be passed to every function that modifies DB.
 * parent_script_id = id of the parent script that triggered this event.
 * parent_document_id = id of the document that triggered this event.
 */

var deleted = document['v-s:deleted'],
	doc_uri = document['@'],
	uri = "d:membership_" + doc_uri.split(":").join("_") + "_" + "cfg_OrgGroup",
	membership = {
		'@' : genUri(), 
		'rdf:type' : [{data: 'v-s:Membership', type : _Uri}],
		'v-s:resource'  : [{data: doc_uri, type : _Uri}],
		'v-s:memberOf' : [{data: 'cfg:OrgGroup', type : _Uri}],
		'rdfs:comment'  : [{data: "выдан cfg:Event_2", type : _String}]
	};

if (deleted && deleted[0].data === true) {
	membership['v-s:deleted'] = deleted;
}
put_individual (ticket, membership, _event_id);

var type = document['rdf:type'];
if (type && getUri (type) === 'v-s:Person' && document['@'] !== 'cfg:Guest') {
    membership = {
		'@' : genUri(), 
		'rdf:type' : [{data: 'v-s:Membership', type : _Uri}],
		'v-s:resource'  : [{data: doc_uri, type : _Uri}],
		'v-s:memberOf' : [{data: 'cfg:AllUsersGroup', type : _Uri}],
		'rdfs:comment'  : [{data: "выдан cfg:Event_2", type : _String}]
    };
	put_individual (ticket, membership, _event_id);
}
  """ ;
.

cfg:Event_3
  rdf:type v-s:Event ;
  v-s:author cfg:VedaSystem ;
  rdfs:label "скрипт включает индивиды онтологии и UI настройки в группу cfg:OntologyGroup"@ru ;
  rdfs:comment "скрипт включает индивиды онтологии и UI настройки в группу cfg:OntologyGroup"@ru ;
  v-s:filter rdf:Property ;
  v-s:filter rdfs:Class ;
  v-s:filter rdfs:Datatype ;
  v-s:filter owl:Class ;
  v-s:filter owl:Ontology ;
  v-s:filter owl:DatatypeProperty ;
  v-s:filter owl:ObjectProperty ;
  v-s:filter owl:Restriction ;
  v-s:filter v-s:ClassModel ;
  v-s:filter v-ui:ClassTemplate ;
  v-s:filter v-ui:PropertySpecification ;
  v-s:filter v-ui:IntegerPropertySpecification ;
  v-s:filter v-ui:DecimalPropertySpecification ;
  v-s:filter v-ui:DatetimePropertySpecification ;
  v-s:filter v-ui:StringPropertySpecification ;
  v-s:filter v-ui:BooleanPropertySpecification ;
  v-s:filter v-ui:ObjectPropertySpecification ;
  v-s:filter v-s:Bundle ;
  v-s:script """
/* Available variables:
 * ticket = superuser ticket
 * document = captured document
 * user_uri = user whose actions triggered event
 * prev_state = user whose actions triggered event
 * _event_id = id of the event to prevent cycles in triggers. Must be passed to every function that modifies DB.
 * parent_script_id = id of the parent script that triggered this event.
 * parent_document_id = id of the document that triggered this event.
 */

var doc_uri = document['@'],
	uri = "d:membership_" + doc_uri.split(":").join("_") + "_" + "cfg_OntologyGroup",
	membership = get_individual(ticket, uri);

if (membership) { return; }

membership = {
	'@' : uri, 
	'rdf:type' : [{data: 'v-s:Membership', type : _Uri}],
	'v-s:resource'  : [{data: doc_uri, type : _Uri}],
	'v-s:memberOf' : [{data: 'cfg:OntologyGroup', type : _Uri}],
	'rdfs:comment'  : [{data: "выдан cfg:Event_3", type : _String}]
};
put_individual (ticket, membership, _event_id);

// Update ontology vsn
var vsn = {
	"@" : "cfg:OntoVsn", 
	"rdf:type" : [{data: "rdfs:Resource", type : _Uri}],
	"rdf:value" : [{data: guid(), type : _String}]
};
put_individual (ticket, vsn, _event_id);
  """ ;
.

cfg:Event_5
  rdf:type v-s:Event ;
  v-s:author cfg:VedaSystem ;
  rdfs:label "скрипт включения индивидов в группу своего класса для авторизации по классу"@ru ;
  rdfs:comment "скрипт включения индивидов в группу своего класса для авторизации по классу"@ru ;
  v-s:filter v-s:AuthorizedClass ;
  v-s:script """
/* Available variables:
 * ticket = superuser ticket
 * document = captured document
 * user_uri = user whose actions triggered event
 * prev_state = user whose actions triggered event
 * _event_id = id of the event to prevent cycles in triggers. Must be passed to every function that modifies DB.
 * parent_script_id = id of the parent script that triggered this event.
 * parent_document_id = id of the document that triggered this event.
 */

if (parent_document_id && parent_document_id === document['@']) return;

var doc_uri = document["@"],
	_classes = getUris( document["rdf:type"] ),
	del = false;

if ( hasValue(document, "v-s:deleted", { data: true, type: _Boolean}) ) {
	del = true;
}

_classes.map(function (class_uri) {
	hierGroup(doc_uri, class_uri, del);
});

function hierGroup(doc_uri, class_uri, del) {
	if (
		class_uri === "owl:Thing" 
		|| class_uri === "rdfs:Resource" 
		|| class_uri === "v-s:Membership" 
		|| class_uri === "v-s:PermissionStatement"
	) {
		return;
	}
	var uri = 'd:membership_' + doc_uri.split(':').join('_') + '_' + class_uri.split(':').join('_'),
		membership = get_individual(ticket, uri);
	
	check:
	if (!membership) {
		membership = {
			'@' : uri, 
			'rdf:type' : [{data: 'v-s:Membership', type : _Uri}],
			'v-s:memberOf' : [{data: class_uri, type : _Uri}],
			'v-s:resource'  : [{data: doc_uri, type : _Uri}],
			'rdfs:comment'  : [{data: 'создано cfg:Event_5', type : _String}],
		};
		if (del) {
			membership['v-s:deleted'] = [{data: true, type : _Boolean}];
		}
		put_individual (ticket, membership, _event_id);
	} else {
		if ( del && !hasValue(membership, "v-s:deleted", {data: true, type: _Boolean}) ) {
			membership["v-s:deleted"] = [{data: true, type: _Boolean}];
			put_individual (ticket, membership, _event_id);
		} else if ( !del && hasValue(membership, "v-s:deleted", {data: true, type: _Boolean}) ) {
			delete membership['v-s:deleted'];
			put_individual (ticket, membership, _event_id);
		} 
	}

	var _class = get_individual(ticket, class_uri);
	if (_class) {
		var _super = getUris(_class["rdfs:subClassOf"]);
		if (_super) {
			_super.map(function (class_uri) {
				hierGroup(doc_uri, class_uri, del);	
			});
		}
	}
}
  """ ;
.
