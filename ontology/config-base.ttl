@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix v-wf: <http://semantic-machines.com/veda/veda-workflow/> .
@prefix v-s: <http://semantic-machines.com/veda/veda-schema/> .
@prefix v-ui: <http://semantic-machines.com/veda/veda-ui/> .
@prefix v-l: <http://semantic-machines.com/veda/veda-layout/> .
@prefix m-l: <http://semantic-machines.com/veda/mondi-layout/> .
@prefix cfg: <http://semantic-machines.com/veda/config/> .
@prefix td: <http://semantic-machines.com/veda/test-data/> .


@prefix cfgb: <http://semantic-machines.com/veda/config-base/> .
<http://semantic-machines.com/veda/config-base>
  rdf:type owl:Ontology ;
  rdfs:label "Veda system administrator ontology"@en ;
  rdfs:label "Онтология администратора системы Веда"@ru ;
#  owl:versionInfo "1.0" ;
  v-s:loadPriority 2 ;
.

td:pm_pa_au
  rdf:type v-s:PermissionStatement ;
  v-s:canCreate "true"^^xsd:boolean ;
  v-s:permissionObject v-s:PersonalAspect, v-ui:Preferences, v-s:File, v-s:Version;
  v-s:permissionSubject cfg:AllUsersGroup ;
.


cfg:Guest
  rdf:type v-s:Person ;
  v-s:author cfg:VedaSystem ;
  v-s:firstName "Guest"@en ;
  v-s:firstName "Гость"@ru ;
  v-s:hasAccount cfg:GuestAccount ;
  rdfs:label "Guest"@en ;
  rdfs:label "Гость"@ru ;
.

cfg:GuestAccount
  rdf:type v-s:Account ;
  rdfs:label "Guest account"@en ;
  rdfs:label "Гостевая учетная запись"@ru ;
.

cfg:VedaSystem
  rdf:type v-s:Person ;
  v-s:author cfg:VedaSystem ;
  v-s:actualVersion cfg:VedaSystem ;
  v-s:birthday "2014-03-05"^^xsd:dateTime ;
  v-s:firstName "Veda"@en ;
  v-s:firstName "Веда"@ru ;
  v-s:hasAccount cfg:VedaSystemAccount ;
  v-s:lastName "System"@en ;
  v-s:lastName "Система"@ru ;
  rdfs:label "Veda System"@en ;
  rdfs:label "Система Веда"@ru ;
.

cfg:Permission_VedaSystem_allRead
  rdf:type v-s:PermissionStatement ;
  v-s:canRead "true"^^xsd:boolean ;
  v-s:permissionObject cfg:VedaSystem ;
  v-s:permissionSubject cfg:AllUsersGroup ;
.

cfg:VedaSystemAppointment
  rdf:type v-s:Appointment ;
  v-s:author cfg:VedaSystem ;
  v-s:employee cfg:VedaSystem ;
.

cfg:VedaSystemAccount
  rdf:type v-s:Account ;
  v-s:author cfg:VedaSystem ;
  v-s:login "veda" ;
  v-s:password "4d1af0e10dab5fe07ae8d23bad5650b46804fb110cfb92f119213bc86aa03d34" ;
  v-s:owner cfg:VedaSystem ;
  rdfs:label "Veda System account"@en ;
  rdfs:label "Учетная запись системы Веда"@ru ;
  v-s:mailbox "DocFlow.Syktyvkar@mondigroup.com" ;
.

cfg:Administrator
  rdf:type v-s:Person ;
  v-s:author cfg:VedaSystem ;
  v-s:actualVersion cfg:Administrator ;
  v-s:birthday "2014-03-05"^^xsd:dateTime ;
  v-s:firstName "Administrator"@en ;
  v-s:firstName "Администратор"@ru ;
  v-s:hasAccount cfg:AdministratorAccount ;
  rdfs:label "Administrator"@en ;
  rdfs:label "Администратор"@ru ;
.

cfg:AdministratorAppointment
  rdf:type v-s:Appointment ;
  v-s:author cfg:VedaSystem ;
  v-s:employee cfg:Administrator ;
.

cfg:AdministratorAccount
  rdf:type v-s:Account ;
  v-s:author cfg:VedaSystem ;
  v-s:login "admin" ;
  v-s:password "4d1af0e10dab5fe07ae8d23bad5650b46804fb110cfb92f119213bc86aa03d34" ;
  v-s:owner cfg:Administrator ;
  rdfs:label "Administrator account"@en ;
  rdfs:label "Учетная запись администратора"@ru ;
.

cfg:SuperUser
  rdf:type v-s:Group ;
  v-s:author cfg:VedaSystem ;
  rdfs:label "Super admin"@en ;
  rdfs:label "Супер админ"@ru ;
.

cfg:TTLResourcesGroup
  rdf:type v-s:Group ;
  v-s:author cfg:VedaSystem ;
  rdfs:label "TTL resources group"@en ;
  rdfs:label "Группа всех ресурсов из TTL"@ru ;
.

cfg:AllUsersGroup
  rdf:type v-s:Group ;
  v-s:author cfg:VedaSystem ;
  rdfs:label "All users group"@en ;
  rdfs:label "Группа всех пользователей"@ru ;
.

cfg:OntologyGroup
  rdf:type v-s:Group ;
  v-s:author cfg:VedaSystem ;
  rdfs:label "Group for Ontology individuals"@en ;
  rdfs:label "Группа для индивидов онтологии"@ru ;
.

cfg:Membership_su
  rdf:type v-s:Membership ;
  v-s:author cfg:VedaSystem ;
  v-s:resource cfg:VedaSystem ;
  v-s:resource cfg:Administrator ;
  v-s:memberOf cfg:SuperUser ;
.

cfg:Permission_su
  rdf:type v-s:PermissionStatement ;
  v-s:author cfg:VedaSystem ;
  v-s:permissionSubject cfg:SuperUser ;
  v-s:permissionObject v-s:AllResourcesGroup ;
  v-s:canCreate "true"^^xsd:boolean ;
  v-s:canDelete "true"^^xsd:boolean ;
  v-s:canRead "true"^^xsd:boolean ;
  v-s:canUpdate "true"^^xsd:boolean ;
.

cfg:Permission_2
  rdf:type v-s:PermissionStatement ;
  v-s:author cfg:VedaSystem ;
  v-s:permissionSubject cfg:AllUsersGroup ;
  v-s:permissionObject cfg:TTLResourcesGroup ;
  v-s:canRead "true"^^xsd:boolean ;
  rdfs:label "Permissions to read TTL resources for all users"@en ;
  rdfs:label "Право на чтение всех ресурсов из TTL для всех пользователей"@ru ;
.

cfg:Permission_3
  rdf:type v-s:PermissionStatement ;
  v-s:author cfg:VedaSystem ;
  v-s:permissionSubject cfg:AllUsersGroup ;
  v-s:permissionObject cfg:OntologyGroup ;
  v-s:canRead "true"^^xsd:boolean ;
  rdfs:label "Permission to read ontology individuals for all users"@en ;
  rdfs:label "Разрешение на чтение онтологии для всех пользователей"@ru ;
.

cfg:Permission_4
  rdf:type v-s:PermissionStatement ;
  v-s:author cfg:VedaSystem ;
  v-s:permissionSubject cfg:AllUsersGroup ;
  v-s:permissionObject v-s:OrganizationUnit_group ;
  v-s:canRead "true"^^xsd:boolean ;
  rdfs:label "Permission to read org. structure individuals for all users"@en ;
  rdfs:label "Разрешение на чтение орг. структуры для всех пользователей"@ru ;
.

cfg:Permission_5
  rdf:type v-s:PermissionStatement ;
  v-s:author cfg:VedaSystem ;
  v-s:permissionSubject cfg:AllUsersGroup ;
  v-s:permissionObject v-s:Journal_group ;
  v-s:permissionObject v-s:JournalRecord_group ;
  v-s:canRead "true"^^xsd:boolean ;
  rdfs:label "Permission to read journals for all users"@en ;
  rdfs:label "Разрешение на чтение журналов для всех пользователей"@ru ;
.

cfg:Permission_6
  rdf:type v-s:PermissionStatement ;
  v-s:author cfg:VedaSystem ;
  v-s:permissionSubject cfg:AllUsersGroup ;
  v-s:permissionObject v-s:Dictionary_group ;
  v-s:canRead "true"^^xsd:boolean ;
  rdfs:label "Permission to read dictionaries for all users"@en ;
  rdfs:label "Разрешение на чтение справочников для всех пользователей"@ru ;
.
#cfg:Permission_7
#  rdf:type v-s:PermissionStatement ;
#  v-s:author cfg:VedaSystem ;
#  v-s:permissionSubject cfg:AllUsersGroup ;
#  v-s:permissionObject v-s:Group_group ;
#  v-s:canRead "true"^^xsd:boolean ;
#  rdfs:label "Permission to read groups for all users "@en ;
#  rdfs:label "Разрешение на чтение групп для всех пользователей"@ru ;
#  v-s:deleted "true"^^xsd:boolean ;
#.

##################### EVENT HANDLERS #####################

cfg:Event_0
  rdf:type v-s:Event1 ;
  v-s:runAt "V8.LowPriority" ;
  v-s:author cfg:VedaSystem ;
  rdfs:label "test event";
  rdfs:comment "test event";
  v-s:script """
var res = query (ticket, "'rdf:type' == 'v-s:Event'");
log_trace("res=", res);
  """ ;
.

cfg:Event_1
  rdf:type v-s:Event ;
  v-s:author cfg:VedaSystem ;
  rdfs:label "Скрипт помещает все индивиды в группу cfg:TTLResourcesGroup";
  rdfs:comment "Скрипт помещает все индивиды в группу cfg:TTLResourcesGroup";
  v-s:script """
/* Available variables:
 * ticket = superuser ticket
 * document = captured document
 * user_uri = user whose actions triggered event
 * prev_state = user whose actions triggered event
 * _event_id = id of the event to prevent cycles in triggers. Must be passed to every function that modifies DB.
 * parent_script_id = id of the parent script that triggered this event.
 * parent_document_id = id of the document that triggered this event.
 */
var doc_uri = document['@'],
  isDefinedBy = document['rdfs:isDefinedBy'],
  isGroup = getUri(document['rdf:type']) === "v-s:Group";
if ( !isDefinedBy || isGroup) return;
var uri = 'd:membership_' + doc_uri.split(':').join('_') + '_' + 'cfg_TTLResourcesGroup',
  membership = {
    '@' : uri,
    'rdf:type'     : newUri('v-s:Membership'),
    'v-s:memberOf' : newUri('cfg:TTLResourcesGroup'),
    'v-s:resource' : newUri(doc_uri),
    'rdfs:comment' : newStr('создано автоматически в обработчике cfg:Event_1')
  };
put_individual(ticket, membership, _event_id);
//log_trace(uri);

  """ ;
.

cfg:Event_2
  rdf:type v-s:Event ;
  v-s:author cfg:VedaSystem ;
  rdfs:label "Скрипт выдает права авторам (v-s:author), владельцам (v-s:owner), издателям (v-s:publisher) и создателям (v-s:creator)";
  rdfs:comment "Скрипт выдает права авторам (v-s:author), владельцам (v-s:owner), издателям (v-s:publisher) и создателям (v-s:creator)";
  v-s:script """
/* Available variables:
 * ticket = superuser ticket
 * document = captured document
 * user_uri = user whose actions triggered event
 * prev_state = user whose actions triggered event
 * _event_id = id of the event to prevent cycles in triggers. Must be passed to every function that modifies DB.
 * parent_script_id = id of the parent script that triggered this event.
 * parent_document_id = id of the document that triggered this event.
 */

/*var doc_uri = document['@'],
  is_new = !prev_state,
  is_ontology = !!document['rdfs:isDefinedBy'];

if (is_new && !is_ontology) {
  document["v-s:author"] = newUri(user_uri);
  document["v-s:owner"] = newUri(user_uri);
  put_individual(ticket, document, _event_id);
  addRight(ticket, [can_read, can_update, can_delete], user_uri, doc_uri);
  //print("Event 2: uri", doc_uri, getUri(document['rdf:type']), "prev", toJson(prev_state) );
}
*/

var doc_uri = document['@'],
  owner_properties = ["v-s:owner", "v-s:author", "v-s:publisher", "v-s:creator"];

owner_properties.map(function (property_uri) {
  var owner_uri = getUri( document[property_uri] );
  if (owner_uri) {
    var owner = get_individual(ticket, owner_uri);
    if (owner) {
      var owner_type = getUri(owner['rdf:type']);
      if (owner_type == 'v-s:Person') {
        var new_right_uri = doc_uri + "_" + owner_uri;
        addRight(ticket, [can_read, can_update, can_delete], owner_uri, doc_uri, new_right_uri);
        //print("Event 2: rights for person", owner_uri, "to doc", doc_uri);
      } else {
        var ff = get_property_chain (ticket, document, property_uri, 'v-s:occupation');
        if (ff) {
          var position_uri = getUri (ff['field']);
          var first_doc = ff['first'];
          if (first_doc) {
            doc_uri = first_doc['@'];
            if (position_uri) {
              new_right_uri = doc_uri + "_" + position_uri;
              addRight(ticket, [can_read, can_update, can_delete], position_uri, doc_uri, new_right_uri);
              //print("Event 2: rights for position", position_uri, "to doc", doc_uri);
            }
          }
        }
      }
    }
  }
});
  """ ;
.

cfg:Event_3
  rdf:type v-s:Event ;
  v-s:author cfg:VedaSystem ;
  rdfs:label "Скрипт создает журнал документа" ;
  rdfs:comment "Скрипт создает журнал документа" ;
  v-s:triggerByType v-s:Journaling, v-s:AutomaticallyVersioned ;
  v-s:script """
/* Available variables:
 * ticket = superuser ticket
 * document = captured document
 * user_uri = user whose actions triggered event
 * prev_state = user whose actions triggered event
 * _event_id = id of the event to prevent cycles in triggers. Must be passed to every function that modifies DB.
 * parent_script_id = id of the parent script that triggered this event.
 * parent_document_id = id of the document that triggered this event.
 */

//print('super_classes > '+toJson(super_classes));

if (super_classes.indexOf('v-s:AutomaticallyVersioned')>=0)
{
//  print('+V');
  create_version(ticket, document, prev_state, user_uri, _event_id);
}

if (super_classes.indexOf('v-s:Journaling')>=0)
{
//  print('+J');

    var publisher_uri = getUri(document['v-s:creator']);
//  print('+J1 '+document['@']);
//  print('+J1 '+toJson(document));
    if (!publisher_uri) { return; }

    var publisher = get_individual(ticket, publisher_uri);
//  print('+J2');
    if (!publisher) { return; }

    var employee_uri;
//  print('+J3');
    if (isExists(publisher['rdf:type'], newUri('v-s:Appointment')))
    {
        employee_uri = publisher['v-s:employee'];
        if (!employee_uri) { return; }
    }
    else
    {
        employee_uri = publisher_uri;
    }

//  print('+J4');
    if (!employee_uri) { return; }

    var journal_uri = getJournalUri(document['@']);
    var exist_journal = get_individual(ticket, journal_uri);
//  print('+J5');
    if (exist_journal)
    {
//    print('+J6');
        // UPDATE DOCUMENT
        var journal_record = newJournalRecord(journal_uri);
        if (document['v-s:actualVersion'] && document['v-s:actualVersion'][0].data == document['@'])
        {
            journal_record['v-s:documentVersion'] = document['v-s:previousVersion'];
        }

        if ((!prev_state['v-s:deleted'] || prev_state['v-s:deleted'].data == 'false') &&
            (document['v-s:deleted'] && document['v-s:deleted'].data == 'true'))
        {
            journal_record['rdf:type'] = [
            {
                data: 'v-s:DocumentDeleted',
                type: _Uri
            }];
        }
        else
        {
            journal_record['rdf:type'] = [
            {
                data: 'v-s:DocumentUpdated',
                type: _Uri
            }];
        }

    var user = get_individual(ticket, user_uri);

    if (user['v-s:hasAppointment']) {
          journal_record['v-s:actor'] = user['v-s:hasAppointment']
        }

        logToJournal(ticket, journal_uri, journal_record);
        addRight(ticket, [can_read], 'cfg:AllUsersGroup', journal_record['@']);
    }
    else
    {
        // CREATE DOCUMENT
        var new_journal = {
            '@': journal_uri,
            'rdf:type': [
            {
                data: 'v-s:Journal',
                type: _Uri
            }],
            'v-s:onDocument': [
            {
                data: document['@'],
                type: _Uri
            }],
            'v-s:actor': [
            {
                data: user_uri,
                type: _Uri
            }]
        };
        put_individual(ticket, new_journal, _event_id);
//      print('+J'+journal_uri);

        addRight(ticket, [can_read], 'cfg:AllUsersGroup', journal_uri);

        var journal_record = newJournalRecord(new_journal['@']);
        if (document['v-s:actualVersion'] && document['v-s:actualVersion'][0].data == document['@'])
        {
            journal_record['v-s:documentVersion'] = document['v-s:previousVersion'];
        }
        journal_record['rdf:type'] = [
        {
            data: 'v-s:DocumentCreated',
            type: _Uri
        }];
        journal_record['v-s:actor'] = [
        {
            data: user_uri,
            type: _Uri
        }];
        logToJournal(ticket, journal_uri, journal_record);
        addRight(ticket, [can_read], 'cfg:AllUsersGroup', journal_record['@']);
    }
}
  """ ;
.

cfg:Event_4
  rdf:type v-s:Event ;
  v-s:author cfg:VedaSystem ;
  rdfs:label "Скрипт включает единицу орг. структуры в группу родительской единицы. Включает персону в группу должности." ;
  rdfs:comment "Скрипт включает единицу орг. структуры в группу родительской единицы. Включает персону в группу должности." ;
  v-s:triggerByType v-s:Organization ;
  v-s:triggerByType v-s:Department ;
  v-s:triggerByType v-s:Position ;
  v-s:triggerByType v-s:Appointment ;
  v-s:script """
/* Available variables:
 * ticket = superuser ticket
 * document = captured document
 * user_uri = user whose actions triggered event
 * prev_state = user whose actions triggered event
 * _event_id = id of the event to prevent cycles in triggers. Must be passed to every function that modifies DB.
 * parent_script_id = id of the parent script that triggered this event.
 * parent_document_id = id of the document that triggered this event.
 */

var doc_uri = document['@'],
  deleted = hasValue(document, "v-s:deleted", { data: true, type: _Boolean });

if ( hasValue(document, "v-s:parentUnit") ) {
  var parents = getUris( document["v-s:parentUnit"] );
  parents.map(function (parent_uri) {
    var uri = "d:membership_" + doc_uri.split(":").join("_") + "_" + parent_uri.split(":").join("_"),
      membership = {
        '@' : uri,
        'rdf:type'     : newUri("v-s:Membership"),
        'v-s:resource' : newUri(doc_uri),
        'v-s:memberOf' : newUri(parent_uri),
        'rdfs:comment' : newStr("выдан cfg:Event_4")
      };
    if (deleted) {
      membership['v-s:deleted'] = newBool(true);
    }
    put_individual (ticket, membership, _event_id);

    //print('cfg:Event_4 (unit to parent)', uri);

  });
}

if ( hasValue(document, "rdf:type", { data: "v-s:Appointment", type: _Uri }) ) {
  var person_uri = getUri(document['v-s:employee']),
    position_uri = getUri(document['v-s:occupation']);

  if (!person_uri || !position_uri) return;

  var uri = 'd:membership_' + person_uri.split(':').join('_') + '_' + position_uri.split(':').join('_'),
    membership = {
      '@' : uri,
      'rdf:type'     : newUri('v-s:Membership'),
      'v-s:memberOf' : newUri(position_uri),
      'v-s:resource' : newUri(person_uri),
      'rdfs:comment' : newStr('создано автоматически в обработчике cfg:Event_4')
    };
  if (deleted) {
    membership['v-s:deleted'] = newBool(true);
  }
  put_individual (ticket, membership, _event_id);

  //print('cfg:Event_4 (unit to position)', uri);

}
  """ ;
.

cfg:Event_5
  rdf:type v-s:Event ;
  v-s:author cfg:VedaSystem ;
  rdfs:label "Скрипт включает персону (кроме cfg:Guest) в группу cfg:AllUsersGroup." ;
  rdfs:comment "Скрипт включает персону (кроме cfg:Guest) в группу cfg:AllUsersGroup." ;
  v-s:triggerByType v-s:Person ;
  v-s:script """
/* Available variables:
 * ticket = superuser ticket
 * document = captured document
 * user_uri = user whose actions triggered event
 * prev_state = user whose actions triggered event
 * _event_id = id of the event to prevent cycles in triggers. Must be passed to every function that modifies DB.
 * parent_script_id = id of the parent script that triggered this event.
 * parent_document_id = id of the document that triggered this event.
 */

var doc_uri = document['@'],
  deleted = hasValue(document, 'v-s:deleted', { data: true, type: _Boolean}),
  uri = 'd:membership_' + doc_uri.split(':').join('_') + '_' + 'cfg_AllUsersGroup';

if (doc_uri === 'cfg:Guest') { return; }

var membership = {
  '@' : uri,
  'rdf:type'     : newUri('v-s:Membership'),
  'v-s:resource' : newUri(doc_uri),
  'v-s:memberOf' : newUri('cfg:AllUsersGroup'),
  'rdfs:comment' : newStr('выдан cfg:Event_5')
};
if (deleted) {
  membership['v-s:deleted'] = newBool(true);
}
put_individual (ticket, membership, _event_id);

//print('cfg:Event_5', uri);

  """ ;
.

cfg:Event_6
  rdf:type v-s:Event ;
  v-s:author cfg:VedaSystem ;
  rdfs:label "Скрипт включает индивид онтологии и UI настроек в группу cfg:OntologyGroup." ;
  rdfs:comment "Скрипт включает индивид онтологии и UI настроек в группу cfg:OntologyGroup." ;
  v-s:triggerByType rdf:Property ;
  v-s:triggerByType rdfs:Class ;
  v-s:triggerByType rdfs:Datatype ;
  v-s:triggerByType owl:Class ;
  v-s:triggerByType owl:Ontology ;
  v-s:triggerByType owl:DatatypeProperty ;
  v-s:triggerByType owl:ObjectProperty ;
  v-s:triggerByType owl:Restriction ;
  v-s:triggerByType v-s:ClassModel ;
  v-s:triggerByType v-ui:ClassTemplate ;
  v-s:triggerByType v-ui:PropertySpecification ;
  v-s:triggerByType v-ui:IntegerPropertySpecification ;
  v-s:triggerByType v-ui:DecimalPropertySpecification ;
  v-s:triggerByType v-ui:DatetimePropertySpecification ;
  v-s:triggerByType v-ui:StringPropertySpecification ;
  v-s:triggerByType v-ui:BooleanPropertySpecification ;
  v-s:triggerByType v-ui:ObjectPropertySpecification ;
  v-s:triggerByType v-s:Bundle ;
  v-s:script """
/* Available variables:
 * ticket = superuser ticket
 * document = captured document
 * user_uri = user whose actions triggered event
 * prev_state = user whose actions triggered event
 * _event_id = id of the event to prevent cycles in triggers. Must be passed to every function that modifies DB.
 * parent_script_id = id of the parent script that triggered this event.
 * parent_document_id = id of the document that triggered this event.
 */

// Update ontology vsn
var vsn = {
  "@" : "cfg:OntoVsn",
  "rdf:type"  : newUri("rdfs:Resource"),
  "rdf:value" : newStr( guid() )
};
put_individual (ticket, vsn, _event_id);

// Add to cfg:OntologyGroup
var doc_uri = document['@'],
  uri = "d:membership_" + doc_uri.split(":").join("_") + "_" + "cfg_OntologyGroup",
  membership = get_individual(ticket, uri);

if (membership) { return; }

membership = {
  '@' : uri,
  'rdf:type'     : newUri('v-s:Membership'),
  'v-s:memberOf' : newUri('cfg:OntologyGroup'),
  'v-s:resource' : newUri(doc_uri),
  'rdfs:comment' : newStr('выдан cfg:Event_6')
};
put_individual (ticket, membership, _event_id);

//print('cfg:Event_6', uri);
  """ ;
.

cfg:Event_7
  rdf:type v-s:Event ;
  v-s:author cfg:VedaSystem ;
  rdfs:label "Скрипт включает индивид в группу индивидов своего класса." ;
  rdfs:comment "Скрипт включает индивид в группу индивидов своего класса." ;
  v-s:triggerByType v-s:ClassAuthorized ;
  v-s:script """
/* Available variables:
 * ticket = superuser ticket
 * document = captured document
 * user_uri = user whose actions triggered event
 * prev_state = user whose actions triggered event
 * _event_id = id of the event to prevent cycles in triggers. Must be passed to every function that modifies DB.
 * parent_script_id = id of the parent script that triggered this event.
 * parent_document_id = id of the document that triggered this event.
 */

if (parent_document_id && parent_document_id === document['@']) return;

var doc_uri = document["@"],
  _classes = getUris( document["rdf:type"] ),
  doc_deleted = hasValue(document, "v-s:deleted", { data: true, type: _Boolean});

_classes.map(function (class_uri) {
  var class_group_uri = class_uri + '_group', // uri группы индивидов класса
    uri = 'd:membership_' + doc_uri.split(':').join('_') + '_' + class_group_uri.split(':').join('_'),
    membership = get_individual(ticket, uri);

  if (!membership) {
    membership = {
      '@' : uri,
      'rdf:type'     : newUri('v-s:Membership'),
      'v-s:memberOf' : newUri(class_group_uri),
      'v-s:resource' : newUri(doc_uri),
      'rdfs:comment' : newStr('создано cfg:Event_7')
    };
    if (doc_deleted) {
      membership['v-s:deleted'] = newBool(true);
    }
  } else {
    var mem_deleted = hasValue(membership, "v-s:deleted", { data: true, type: _Boolean});
    if ( doc_deleted && !mem_deleted ) {
      membership["v-s:deleted"] = newBool(true);
    } else if ( !doc_deleted && mem_deleted ) {
      delete membership['v-s:deleted'];
    } else {
      return ;
    }
  }
  put_individual (ticket, membership, _event_id);

  //print('cfg:Event_7', uri);
});
  """ ;
.

cfg:Event_8
  rdf:type v-s:Event ;
  v-s:author cfg:VedaSystem ;
  rdfs:label "Скрипт включает группу индивидов класса в группу индивидов суперкласса. Включает класс в группу суперкласса." ;
  rdfs:comment "Скрипт включает группу индивидов класса в группу индивидов суперкласса. Включает класс в группу суперкласса." ;
  v-s:triggerByType rdfs:Class ;
  v-s:script """
/* Available variables:
 * ticket = superuser ticket
 * document = captured document
 * user_uri = user whose actions triggered event
 * prev_state = user whose actions triggered event
 * _event_id = id of the event to prevent cycles in triggers. Must be passed to every function that modifies DB.
 * parent_script_id = id of the parent script that triggered this event.
 * parent_document_id = id of the document that triggered this event.
 */

if (parent_document_id && parent_document_id === document['@']) return;

var _class = document,
  class_uri = _class["@"],
  class_group_uri = class_uri + "_group",
  class_deleted = hasValue(_class, "v-s:deleted", { data: true, type: _Boolean } ),
  class_group = get_individual(ticket, class_group_uri);

if ( !class_group ) {
  var class_group = {
    '@' : class_group_uri,
    'rdf:type'     : newUri('v-s:Group'),
    'rdfs:label' : newStr("Группа индивидов класса " + class_uri),
    'rdfs:comment' : newStr('создано cfg:Event_8')
  };
  put_individual (ticket, class_group, _event_id);
  //print("cfg:Event_8 class group", class_group_uri);
}

if ( !hasValue(_class, "rdfs:subClassOf") ) { return; }

var _super_classes = getUris( _class["rdfs:subClassOf"] );

_super_classes.map(function (super_uri) {
  if ( super_uri === "owl:Thing" || class_uri === "rdfs:Resource" ) {
    return;
  }

  // class memberOf superclass
  var uri = 'd:membership_' + class_uri.split(':').join('_') + '_' + super_uri.split(':').join('_'),
    membership = get_individual(ticket, uri);
  if (!membership) {
    membership = {
      '@' : uri,
      'rdf:type'     : newUri('v-s:Membership'),
      'v-s:memberOf' : newUri(super_uri),
      'v-s:resource' : newUri(class_uri),
      'rdfs:comment' : newStr('1. создано cfg:Event_8')
    }
    put_individual (ticket, membership, _event_id);
    //print('cfg:Event_8 membership (class -> superclass)', uri);
  }

  // class_group memberOf superclass_group
  var super_group_uri = super_uri + "_group",
    uri = 'd:membership_' + class_group_uri.split(':').join('_') + '_' + super_group_uri.split(':').join('_'),
    membership = get_individual(ticket, uri);

  if (!membership) {
    membership = {
      '@' : uri,
      'rdf:type'     : newUri('v-s:Membership'),
      'v-s:memberOf' : newUri(super_group_uri),
      'v-s:resource' : newUri(class_group_uri),
      'rdfs:comment' : newStr('2. создано cfg:Event_8')
    };
    if (class_deleted) {
      membership['v-s:deleted'] = newBool(true);
    }
  } else {
    var mem_deleted = hasValue(membership, "v-s:deleted", { data: true, type: _Boolean});

    if ( class_deleted && !mem_deleted ) {
      membership["v-s:deleted"] = newBool(true);
    } else if ( !class_deleted && mem_deleted ) {
      delete membership['v-s:deleted'];
    } else {
      return;
    }
  }
  put_individual (ticket, membership, _event_id);
  //print('cfg:Event_8 membership', uri);

});
  """ ;
.

cfg:Event_9
  rdf:type v-s:Event ;
  v-s:author cfg:VedaSystem ;
  rdfs:label "Скрипт включает вложенные индивиды в группу своего родителя." ;
  rdfs:comment "Скрипт включает вложенные индивиды в группу своего родителя." ;
  v-s:triggerByType v-s:Embedded ;
  v-s:script """
/* Available variables:
 * ticket = superuser ticket
 * document = captured document
 * user_uri = user whose actions triggered event
 * prev_state = user whose actions triggered event
 * _event_id = id of the event to prevent cycles in triggers. Must be passed to every function that modifies DB.
 * parent_script_id = id of the parent script that triggered this event.
 * parent_document_id = id of the document that triggered this event.
 */

var doc_uri = document["@"],
  parent_uri = getUri( document["v-s:parent"] ),
  doc_deleted = hasValue(document, "v-s:deleted", { data: true, type: _Boolean});

//print('cfg:Event_9', 'start', 'parent_uri', parent_uri );

if (!parent_uri) { return; }

var uri = 'd:membership_' + doc_uri.split(':').join('_') + '_' + parent_uri.split(':').join('_'),
  membership = get_individual(ticket, uri);

if (!membership) {
  membership = {
    '@' : uri,
    'rdf:type'     : newUri('v-s:Membership'),
    'v-s:memberOf' : newUri(parent_uri),
    'v-s:resource' : newUri(doc_uri),
    'rdfs:comment' : newStr('создано cfg:Event_9')
  };
  if (doc_deleted) {
    membership['v-s:deleted'] = newBool(true);
  }
} else {
  var mem_deleted = hasValue(membership, "v-s:deleted", { data: true, type: _Boolean});
  if ( doc_deleted && !mem_deleted ) {
    membership["v-s:deleted"] = newBool(true);
  } else if ( !doc_deleted && mem_deleted ) {
    delete membership['v-s:deleted'];
  } else {
    //print('cfg:Event_9', uri, 'nothing changed');
    return ;
  }
}
put_individual (ticket, membership, _event_id);

//print('cfg:Event_9', uri);

  """ ;
.

cfg:Event_10
  rdf:type v-s:Event ;
  v-s:author cfg:VedaSystem ;
  rdfs:label "Скрипт включает журнал и записи журнала в группу документа с ограниченим прав до R." ;
  rdfs:comment "Скрипт включает журнал и записи журнала в группу документа с ограниченим прав до R." ;
  v-s:triggerByType v-s:Journal ;
  v-s:triggerByType v-s:JournalRecord ;
  v-s:script """
/* Available variables:
 * ticket = superuser ticket
 * document = captured document
 * user_uri = user whose actions triggered event
 * prev_state = user whose actions triggered event
 * _event_id = id of the event to prevent cycles in triggers. Must be passed to every function that modifies DB.
 * parent_script_id = id of the parent script that triggered this event.
 * parent_document_id = id of the document that triggered this event.
 */

if ( document['v-wf:isTrace'] || getUri(document['rdf:type']) === 'v-wf:TraceRecord' ) { return; }

var this_uri = document['@'],
  group_uri = getUri(document["v-s:onDocument"]) || getUri(document["v-s:parentJournal"]) || getUri(document["v-wf:onProcess"]);

if (!group_uri) { return; }

var uri = 'd:membership_' + this_uri.split(':').join('_') + '_' + group_uri.split(':').join('_');

var membership = get_individual(ticket, uri);

if (membership) { return; }

membership = {
  '@' : uri,
  'rdf:type'     : newUri('v-s:Membership'),
  'v-s:memberOf' : newUri(group_uri),
  'v-s:resource' : newUri(this_uri),
  'rdfs:comment' : newStr('создано cfg:Event_10'),
  'v-s:canRead'  : newBool(true)
};

put_individual (ticket, membership, _event_id);

//print('cfg:Event_10 journal membership', uri);

  """ ;
.

cfg:Event_11
  rdf:type v-s:Event ;
  v-s:author cfg:VedaSystem ;
  rdfs:label "Скрипт включает задания в группу запущенного процесса с ограниченим прав до R." ;
  rdfs:comment "Скрипт включает задания в группу запущенного процесса с ограниченим прав до R." ;
  v-s:triggerByType v-wf:Process ;
  v-s:triggerByType v-wf:WorkItem ;
  v-s:triggerByType v-wf:WorkOrder ;
  v-s:triggerByType v-wf:DecisionForm ;
  v-s:script """
/* Available variables:
 * ticket = superuser ticket
 * document = captured document
 * user_uri = user whose actions triggered event
 * prev_state = user whose actions triggered event
 * _event_id = id of the event to prevent cycles in triggers. Must be passed to every function that modifies DB.
 * parent_script_id = id of the parent script that triggered this event.
 * parent_document_id = id of the document that triggered this event.
 */

var this_uri = document['@'],
  group_uri = getUri(document["v-wf:forProcess"]) || getUri(document["v-wf:forWorkItem"]) || getUri(document["v-wf:onWorkOrder"]) || getUri(document["v-wf:parentWorkOrder"]);

if (!group_uri) { return; }

var uri = 'd:membership_' + this_uri.split(':').join('_') + '_' + group_uri.split(':').join('_');

var membership = get_individual(ticket, uri);

if (membership) { return; }

membership = {
  '@' : uri,
  'rdf:type'     : newUri('v-s:Membership'),
  'v-s:memberOf' : newUri(group_uri),
  'v-s:resource' : newUri(this_uri),
  'rdfs:comment' : newStr('создано cfg:Event_11'),
  'v-s:canRead'  : newBool(true)
};

put_individual (ticket, membership, _event_id);

//print('cfg:Event_11 process membership', uri);

  """ ;
.

cfg:Event_12
  rdf:type v-s:Event ;
  v-s:author cfg:VedaSystem ;
  rdfs:label "Скрипт включает процесс в группу журнала документа." ;
  rdfs:comment "Скрипт включает процесс в группу журнала документа." ;
  v-s:triggerByType v-s:ProcessStarted ;
  v-s:script """
/* Available variables:
 * ticket = superuser ticket
 * document = captured document
 * user_uri = user whose actions triggered event
 * prev_state = user whose actions triggered event
 * _event_id = id of the event to prevent cycles in triggers. Must be passed to every function that modifies DB.
 * parent_script_id = id of the parent script that triggered this event.
 * parent_document_id = id of the document that triggered this event.
 */

var process_uri = getUri(document['v-wf:onProcess']),
  doc_journal_uri = getUri(document['v-s:onDocument']) + "j";

var uri = 'd:membership_' + process_uri.split(':').join('_') + '_' + doc_journal_uri.split(':').join('_');

var membership = get_individual(ticket, uri);

if (membership) { return; }

membership = {
  '@' : uri,
  'rdf:type'     : newUri('v-s:Membership'),
  'v-s:memberOf' : newUri(doc_journal_uri),
  'v-s:resource' : newUri(process_uri),
  'rdfs:comment' : newStr('создано cfg:Event_12'),
  'v-s:canRead'  : newBool(true)
};

put_individual (ticket, membership, _event_id);

//print('cfg:Event_12 process membership', uri);

  """ ;
.

cfg:Event_13
  rdf:type v-s:Event ;
  v-s:author cfg:VedaSystem ;
  rdfs:label "Manually create version" ;
  rdfs:comment "Manually create version" ;
  v-s:triggerByType v-s:ManuallyVersioned ;
  v-s:script """
  if ((document['v-s:triggerVersionCreation'] && document['v-s:triggerVersionCreation'][0]
    && document['v-s:triggerVersionCreation'][0].data == true) || !prev_state) {
    delete document['v-s:triggerVersionCreation'];
  create_version(ticket, document, prev_state, user_uri, _event_id);
  }

  """ ;
.

cfg:Event_14
  rdf:type v-s:Event ;
  v-s:author cfg:VedaSystem ;
  rdfs:label "Пусто." ;
  rdfs:comment "Пусто." ;
  v-s:triggerByType v-s:Versioned ;
  v-s:disabled true ;
  v-s:script """
  """ ;
.

cfg:Event_15
  rdf:type v-s:Event ;
  v-s:author cfg:VedaSystem ;
  rdfs:label "Скрипт обработки связей документов" ;
  rdfs:comment "Скрипт обработки связей документов" ;
  v-s:triggerByType v-s:Link ;
  v-s:script """
  var linkUri = document["@"],
      linkToUri = getUri(document["v-s:to"]),
      linkFromUri = getUri(document["v-s:from"]),
      linkTo = get_individual(ticket, linkToUri),
      linkFrom = get_individual(ticket, linkFromUri),
      containsThisLink,
      membershipUri = "d:link_membership_" + linkUri.split(":").join("_") + "_" + linkToUri.split(":").join("_") + "_" + linkFromUri.split(":").join("_"),
      membership = {
        '@' : membershipUri,
        'rdf:type'     : newUri('v-s:Membership'),
        'v-s:memberOf' : [ newUri(linkToUri), newUri(linkFromUri) ],
        'v-s:resource' : newUri(linkUri),
        'rdfs:comment' : newStr('создано cfg:Event_15'),
        'v-s:canRead'  : newBool(true)
      };
  if (linkTo) {
    linkTo["v-s:hasLink"] = linkTo["v-s:hasLink"] || [];
    containsThisLink = !!linkTo["v-s:hasLink"].filter(function (item) {
      return (item.data === linkUri);
    }).length;
    if (!containsThisLink) {
      linkTo["v-s:hasLink"].push({type: _Uri, data: linkUri});
      put_individual(ticket, linkTo, _event_id);
    }
  }
  if (linkFrom) {
    linkFrom["v-s:hasLink"] = linkFrom["v-s:hasLink"] || [];
    containsThisLink = !!linkFrom["v-s:hasLink"].filter(function (item) {
      return (item.data === linkUri);
    }).length;
    if (!containsThisLink) {
      linkFrom["v-s:hasLink"].push({type: _Uri, data: linkUri});
      put_individual(ticket, linkFrom, _event_id);
    }
  }
  if (linkTo && linkFrom) {
    put_individual(ticket, membership, _event_id);
    print("EVENT 15", JSON.stringify(membership, null, 2));
  }
  """ ;
.

cfg:Event_16
  rdf:type v-s:Event ;
  v-s:author cfg:VedaSystem ;
  rdfs:label "Скрипт обработки обратных ссылок" ;
  rdfs:comment "Скрипт обработки обратных ссылок" ;
  v-s:triggerByType v-s:BackwardLink ;
  v-s:script """
  var backwardLinkUri = document["@"],
      backwardPropertyUri = getUri(document["v-s:backwardProperty"]),
      backwardTargetUri = getUri(document["v-s:backwardTarget"]),
      isDeleted = hasValue(document, "v-s:deleted", { data: true, type: _Boolean }),
      backwardTarget = get_individual(ticket, backwardTargetUri),
      backwardTarget_original = JSON.stringify(backwardTarget);
  if (!backwardTarget || (document['v-s:actualVersion'] && document['v-s:actualVersion'][0].data !== backwardLinkUri) ) {
    return;
  }
  var membershipUri = 'd:backward_membership_' + backwardLinkUri.split(':').join('_') + '_' + backwardTargetUri.split(':').join('_'),
      membership = get_individual(ticket, membershipUri);
  if (!membership) {
    membership = {
      '@' : membershipUri,
      'rdf:type'     : newUri('v-s:Membership'),
      'v-s:memberOf' : newUri(backwardTargetUri),
      'v-s:resource' : newUri(backwardLinkUri),
      'rdfs:comment' : newStr('создано cfg:Event_16'),
      'v-s:canRead'  : newBool(true)
    };
  }
  if (isDeleted) {
    for (var property_uri in backwardTarget) {
      if (property_uri === "@") { continue; }
      backwardTarget[property_uri] = backwardTarget[property_uri].filter(function (item) {
        return (item.data !== backwardLinkUri);
      });
    }
    membership['v-s:deleted'] = newBool(true);
  } else if (backwardPropertyUri) {
    backwardTarget[backwardPropertyUri] = backwardTarget[backwardPropertyUri] || [];
    backwardTarget[backwardPropertyUri] = backwardTarget[backwardPropertyUri].filter(function (item) {
      return (item.data !== backwardLinkUri);
    });
    backwardTarget[backwardPropertyUri].push({type: _Uri, data: backwardLinkUri});
  }
  if (JSON.stringify(backwardTarget).length !== backwardTarget_original.length) {
    put_individual(ticket, backwardTarget, _event_id);
    put_individual(ticket, membership, _event_id);
  }
  """ ;
.
