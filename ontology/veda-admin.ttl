# baseURI: http://semantic-machines.com/veda/veda-admin
# imports: http://semantic-machines.com/veda/veda-schema
# imports: http://www.w3.org/1999/02/22-rdf-syntax-ns#
# imports: http://www.w3.org/2000/01/rdf-schema#
# imports: http://www.w3.org/2002/07/owl

# c14n-version: 3
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix v-a: <http://semantic-machines.com/veda/veda-admin/> .
@prefix v-s: <http://semantic-machines.com/veda/veda-schema/> .
@prefix v-ui: <http://semantic-machines.com/veda/veda-ui/> .
@prefix v-b: <http://semantic-machines.com/veda/veda-bundle/> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix vsrv: <http://semantic-machines.com/veda/veda-server/> .

<http://semantic-machines.com/veda/veda-admin>
  rdf:type owl:Ontology ;
  rdfs:label "Veda system administrator ontology"@en ;
  rdfs:label "Онтология администратора системы Веда"@ru ;
  owl:imports <http://semantic-machines.com/veda/veda-schema> ;
  owl:imports rdf: ;
  owl:imports rdfs: ;
  owl:imports <http://www.w3.org/2002/07/owl> ;
#  owl:versionInfo "1.0" ;
.

#####################################################

v-a:standart_node
	rdf:type vsrv:Node ;
	vsrv:count_thread "4"^^xsd:integer ;
	vsrv:checktime_onto_files "30"^^xsd:integer ;
	vsrv:listener v-a:conn_http;
	vsrv:role "main";
	rdfs:label "стандартная конфигурация" ;
.	

v-a:js_worker_node
	rdf:type vsrv:Node ;
	vsrv:role "js_worker";
	vsrv:listener v-a:conn_http_8081;
	vsrv:write_storage_node v-a:test_conn_http;
	rdfs:label "js worker node" ;
.	

v-a:test_node
	rdf:type vsrv:Node ;
	vsrv:count_thread "4"^^xsd:integer ;
	vsrv:checktime_onto_files "20"^^xsd:integer ;
	vsrv:listener v-a:test_conn_http;
	vsrv:jsvm_node "external";
	vsrv:role "main";
	rdfs:label "тестовая конфигурация" ;
.	

v-a:developer_node
	rdf:type vsrv:Node ;
	vsrv:count_thread "4"^^xsd:integer ;
	vsrv:checktime_onto_files "1"^^xsd:integer ;
	vsrv:listener v-a:conn_http;
	vsrv:role "main";
	vsrv:push_individual_by_event v-a:conn_mysql1;
	rdfs:label "конфигурация разработчика" ;
.	

v-a:conn_http
	rdf:type vsrv:Connection ;
	vsrv:name "http-server" ;
	rdfs:label "http server" ;
	vsrv:port "8080"^^xsd:integer ;
	vsrv:transport "http" ;
.

v-a:conn_http_8081
	rdf:type vsrv:Connection ;
	vsrv:name "http-server" ;
	rdfs:label "http server" ;
	vsrv:port "8081"^^xsd:integer ;
	vsrv:transport "http" ;
.

v-a:test_conn_http
	rdf:type vsrv:Connection ;
	vsrv:name "http-server" ;
	rdfs:label "http server" ;
	vsrv:port "8080"^^xsd:integer ;
	vsrv:transport "http" ;
.

v-a:conn_rabbitmq1 
	rdf:type vsrv:Connection ;
	vsrv:name "funout" ;
	rdfs:label "connect to rabbitmq server" ;
	vsrv:host "127.0.0.1" ;
	vsrv:port "5672"^^xsd:integer ;
	vsrv:transport "rabbitmq" ;
	vsrv:queue "fanout" ;
	vsrv:login "guest" ;
	vsrv:credentional "guest" ;
	vsrv:amqp_vhost	"veda" ;
	vsrv:amqp_routingkey "";	
.

v-a:conn_mysql1
	rdf:type vsrv:Connection ;
	vsrv:name "funout" ;
	rdfs:label "connect to msql" ;
	vsrv:host "test" ;
	vsrv:port "3306"^^xsd:integer ;
	vsrv:transport "mysql" ;
	vsrv:login "ba" ;
	vsrv:credentional ",f,ehtxyfz69" ;
	vsrv:sql_database "veda_db" ;
.

#####################################################

v-a:SuperAdmin
  rdf:type v-s:Group ;
  rdfs:label "Super admin"@en ;
  rdfs:label "Супер админ"@ru ;
.

v-a:ReadUser
  rdf:type v-s:Group ;
  rdfs:label "Read User"@en ;
  rdfs:label "Пользователи имеющие право на чтение"@ru ;
.

v-a:ReadResGroup
  rdf:type v-s:Group ;
  rdfs:label "Resource group to read"@en ;
  rdfs:label "Группа ресурсов для чтения"@ru ;
.

# --------------------------- обработка событий => создание записей о правах ------------------------------
v-a:Event_1
  rdf:type v-s:Event ;
  v-s:author v-a:VedaSystemAccount ;
  v-s:created "2014-01-31T15:28:18"^^xsd:dateTime ;
  v-s:published "2014-01-31T15:28:18"^^xsd:dateTime ;
  v-s:script """

var doc_uri = document['@'];	

var isDefinedBy = document["rdfs:isDefinedBy"];
if (isDefinedBy) {
	var new_membership = {
		'@' : genUri (), 
		'rdf:type' : [{data: 'v-s:Membership', type : _Uri}],
		'v-s:memberOf' : [{data: 'v-a:ReadResGroup', type : _Uri}],
		'v-s:resource'  : [{data: doc_uri, type : _Uri}],
		'rdfs:comment'  : [{data: "выдан v-a:Event_1", type : _String}]
	};
	put_individual (ticket, new_membership, _event_id);
}

var vs_owner = document["v-s:owner"];
if (vs_owner) {
	addRight(ticket, [can_read, can_update, can_delete], getUri(vs_owner), doc_uri);
	//print("#1 owner, doc_uri = " + doc_uri + ", person = " + getUri(vs_owner)); 
}

var vs_author = document["v-s:author"];
if (vs_author) {
    var author = get_individual(ticket, getUri(vs_author));
    if (author) {
		
		var author_type = getUri(author['rdf:type']);
		
		if (author_type == 'v-s:Person') {
			addRight(ticket, [can_read, can_update, can_delete], getUri(vs_author), doc_uri); 
			//print("#2 author = person, doc_uri = " + doc_uri + ", person = " + getUri(vs_author)); 
		} else {
			var ff = get_property_chain (ticket, document, 'v-s:author', 'v-s:employee');
			if (ff) {
				var employee_uri = getUri (ff['field']);
				var first_doc = ff['first'];
				if (first_doc) {
					doc_uri = first_doc['@'];	
					if (employee_uri) {
						//print("#3 author = appointment, doc_uri = " + doc_uri + ", person = " + employee_uri);
						addRight(ticket, [can_read, can_update, can_delete], employee_uri, doc_uri);
					}
				}
			}
		}
    }
}

""" ;
  rdfs:comment "скрипт автоматической выдачи прав авторам (v-s:author) и владельцам (v-s:owner)";
  rdfs:label "Event 1"@en ;
  rdfs:label "Событие 1"@ru ;
.

# --------------------------- обработка событий => создание Журнала документа ------------------------------
v-a:Event_1_1
  rdf:type v-s:Event ;
  v-s:author v-a:VedaSystemAccount ;
  v-s:created "2014-01-31T15:28:18"^^xsd:dateTime ;
  v-s:published "2014-01-31T15:28:18"^^xsd:dateTime ;
  v-s:filter v-s:Journaling ;
  v-s:script """
	//print ('user_uri=', user_uri);	
    //    print('v-a:Event_1_1:journal');

var ff = get_property_chain(ticket, document, 'v-s:author', 'v-s:employee');
if (ff)
{
    var employee_uri = getUri(ff['field']);
    if (employee_uri)
    {
        var journal_uri = getJournalUri(document['@']);
        //print('v-a:Event_1_1:journal journal_uri=' + journal_uri);
        var exist_journal = get_individual(ticket, journal_uri);
        if (exist_journal)
        {
            // UPDATE DOCUMENT

	    var journal_record = newJournalRecord(journal_uri);

	    journal_record['rdfs:label'] = [
                        {
                            data: 'обновлен документ',
                            type: _String
     			}];

	    journal_record['v-s:actor'] = [
                        {
                            data: user_uri,
                            type: _Uri
     			}];
			    	
	
	    logToJournal(ticket, journal_uri, journal_record);
        }
        else
        {
            // CREATE DOCUMENT		
            var new_journal = {
                '@': journal_uri,
                'rdf:type': [
                    {
                        data: 'v-s:Journal',
                        type: _Uri
                }],
                'v-s:onDocument': [
                    {
                        data: document['@'],
                        type: _Uri
                }],
	    	'v-s:actor': [
                        {
                            data: user_uri,
                            type: _Uri
     			}]		
            };
            put_individual(ticket, new_journal, _event_id);

            var new_journal_permission = {
                '@': genUri(),
                'rdf:type': [
                    {
                        data: 'v-s:PermissionStatement',
                        type: _Uri
                }],
                'v-s:canDelete': [
                    {
                        data: true,
                        type: _Bool
                }],
                'v-s:canRead': [
                    {
                        data: true,
                        type: _Bool
                }],
                'v-s:canUpdate': [
                    {
                        data: true,
                        type: _Bool
                }],
                'v-s:permissionObject': [
                    {
                        data: journal_uri,
                        type: _Uri
                }],
                'v-s:permissionSubject': [
                    {
                        data: employee_uri,
                        type: _Uri
                }]
            };
            put_individual(ticket, new_journal_permission, _event_id);
        }

    }
}
""" ;
  rdfs:comment "скрипт автоматической выдачи прав авторам"@ru ;
  rdfs:label "Event_1"@en ;
  rdfs:label "Событие_1"@ru ;
.

v-a:Event_2
  rdf:type v-s:Event ;
  v-s:author v-a:VedaSystemAccount ;
  v-s:created "2014-01-31T15:28:18"^^xsd:dateTime ;
  v-s:published "2014-01-31T15:28:18"^^xsd:dateTime ;
  v-s:filter v-s:Department ;
  v-s:filter v-s:Position ;
  v-s:filter v-s:Appointment ;
  v-s:filter v-s:Person ;
  v-s:script """

// print ('@@1 =', toJson (document));
	    var deleted = document['v-s:deleted'];
	    var doc_uri = document['@'];	
	    var new_membership = 
	    {
    	    '@' : guid (), 
    	    'rdf:type' : [{data: 'v-s:Membership', type : _Uri}],
    	    'v-s:memberOf' : [{data: 'v-a:ReadResGroup', type : _Uri}],
    	    'v-s:resource'  : [{data: doc_uri, type : _Uri}],
    	    'rdfs:comment'  : [{data: "выдан v-a:Event_2", type : _String}]
	    };

	    if (deleted && deleted[0].data == true)
	    {
		//print ('IS DELETED');
		new_membership['v-s:deleted'] = deleted;
	    }
	    var res = put_individual (ticket, new_membership, _event_id);
	    if (res != 200 && res != 1022)
		print ('res=', res, ' @@1 =', toJson (new_membership));			

	    var type = document['rdf:type'];
	    if (type && getUri (type) == 'v-s:Person')
	    {
		new_membership = 
		{
    		'@' : guid (), 
    		'rdf:type' : [{data: 'v-s:Membership', type : _Uri}],
    		'v-s:memberOf' : [{data: 'v-a:ReadUser', type : _Uri}],
    		'v-s:resource'  : [{data: doc_uri, type : _Uri}],
    		'rdfs:comment'  : [{data: "выдан v-a:Event_2", type : _String}]
		};
		res = put_individual (ticket, new_membership, _event_id);
		if (res != 200 && res != 1022)
		    print ('res=', res, ' @@2 =', toJson (new_membership));			
		
	    }

""" ;
  rdfs:comment "скрипт автоматической выдачи прав на чтение для оргструктуры + перенос атрибута v-s:deleted"@ru ;
  rdfs:label "Event_2"@en ;
  rdfs:label "Событие_2"@ru ;
.

v-a:Event_3
  rdf:type v-s:Event ;
  v-s:author v-a:VedaSystemAccount ;
  v-s:created "2014-01-31T15:28:18"^^xsd:dateTime ;
  v-s:published "2014-01-31T15:28:18"^^xsd:dateTime ;
  v-s:filter rdf:Property ;
  v-s:filter rdfs:Class ;
  v-s:filter rdfs:Datatype ;
  v-s:filter owl:Class ;
  v-s:filter owl:Ontology ;
  v-s:filter owl:DatatypeProperty ;
  v-s:filter owl:ObjectProperty ;
  v-s:filter owl:Restriction ;
  v-s:filter v-s:ClassModel ;
  v-s:filter v-ui:ClassTemplate ;
  v-s:filter v-ui:PropertySpecification ;
  v-s:filter v-ui:IntegerPropertySpecification ;
  v-s:filter v-ui:DecimalPropertySpecification ;
  v-s:filter v-ui:DatetimePropertySpecification ;
  v-s:filter v-ui:StringPropertySpecification ;
  v-s:filter v-ui:BooleanPropertySpecification ;
  v-s:filter v-ui:ObjectPropertySpecification ;
  v-s:filter v-b:Bundle ;
  v-s:script """

	    var doc_uri = document['@'];	
	    var new_membership = 
	    {
    	    '@' : guid (), 
    	    'rdf:type' : [{data: 'v-s:Membership', type : _Uri}],
    	    'v-s:memberOf' : [{data: 'v-a:ReadResGroup', type : _Uri}],
    	    'v-s:resource'  : [{data: doc_uri, type : _Uri}],
    	    'rdfs:comment'  : [{data: "выдан v-a:Event_3", type : _String}]
	    };

	    put_individual (ticket, new_membership, _event_id);

""" ;
  rdfs:comment "скрипт автоматической выдачи прав на чтение для всех онтологий и UI настроек"@ru ;
  rdfs:label "Event_3"@en ;
  rdfs:label "Событие_3"@ru ;
.

v-a:Event_4
  rdf:type v-s:Event ;
  v-s:author v-a:VedaSystemAccount ;
  v-s:created "2014-01-31T15:28:18"^^xsd:dateTime ;
  v-s:published "2014-01-31T15:28:18"^^xsd:dateTime ;
  v-s:filter rdf:Property ;
  v-s:filter rdfs:Class ;
  v-s:filter rdfs:Datatype ;
  v-s:filter owl:Class ;
  v-s:filter owl:Ontology ;
  v-s:filter owl:DatatypeProperty ;
  v-s:filter owl:ObjectProperty ;
  v-s:filter owl:Restriction ;
  v-s:filter v-s:ClassModel ;
  v-s:filter v-ui:ClassTemplate ;
  v-s:filter v-ui:PropertySpecification ;
  v-s:filter v-ui:IntegerPropertySpecification ;
  v-s:filter v-ui:DecimalPropertySpecification ;
  v-s:filter v-ui:DatetimePropertySpecification ;
  v-s:filter v-ui:StringPropertySpecification ;
  v-s:filter v-ui:BooleanPropertySpecification ;
  v-s:filter v-ui:ObjectPropertySpecification ;
  v-s:script """
	/* Available variables:
	 * ticket = superuser ticket
	 * document = captured document
	 * user_uri = user who's actions triggered event
	 * _event_id = id of the event to prevent cycles in triggers. Must be passed to every function that modifies DB.
	 */
	
	// Update ontology vsn
	var vsn = {
		"@" : "v-g:OntoVsn", 
		"rdf:type" : [{data: "v-g:Global", type : _Uri}],
		"v-g:literalValue" : [{data: guid(), type : _String}]
	};
	put_individual (ticket, vsn, _event_id);

/*	// Process ontology objects
	function hasValue(doc, prop, val) {
		var any = !!(doc[prop] && doc[prop].length);
		if (!val) return any;
		return !!(any && doc[prop].filter(function (i) {
			return (i.type === val.type && i.data === val.data);
		}).length);
	}

	// owl:Thing && rdfs:Resource domain properties
	var stopList = [
		//"rdf:type",
		//"rdfs:comment",
		//"rdfs:label",
		//"v-s:deleted",
		"owl:annotatedProperty",
		"owl:annotatedSource",
		"owl:annotatedTarget",
		"owl:bottomDataProperty",
		"owl:bottomObjectProperty",
		"owl:deprecated",
		"owl:differentFrom",
		"owl:members",
		"owl:sameAs",
		"owl:topObjectProperty",
		"owl:topDataProperty",
		"owl:versionInfo",
		"rdf:value",
		"rdfs:isDefinedBy",
		"rdfs:member",
		"rdfs:seeAlso"
	];

	var doc = document;
	var type = document["rdf:type"][0].data;
	var uri = document["@"];
	switch (type) {
		// Process classes
		case "rdfs:Class":
		case "owl:Class":
			if ( uri === "rdfs:Resource" ) break;
			// If class is not a subclass of another then make it a subclass of rdfs:Resource
			if ( !hasValue(doc, "rdfs:subClassOf") ) {
				doc["rdfs:subClassOf"] = [{data: "rdfs:Resource", type: _Uri}];
			}
			doc["rdfs:subClassOf"].map( function ( i ) {
				var cls = {
					"@": i.data,
					"v-ui:hasSubClass": [{data: uri, type: _Uri}]
				}
				add_to_individual(ticket, cls, _event_id);
			});
			break;
		// Process properties
		case "rdf:Property" :
		case "owl:DatatypeProperty" :
		case "owl:ObjectProperty" :
		case "owl:OntologyProperty" :
		case "owl:AnnotationProperty" :
			if (stopList.indexOf(uri) >= 0) break;
			if ( hasValue(doc, "rdfs:domain") ) {
				doc["rdfs:domain"].map( function ( i ) {
					var cls = {
						"@": i.data,
						"v-ui:hasProperty": [{data: uri, type: _Uri}]
					}
					add_to_individual(ticket, cls, _event_id);
				});
			}
			break;
		// Process specifications
		case "v-ui:PropertySpecification" :
		case "v-ui:IntegerPropertySpecification" :
		case "v-ui:DecimalPropertySpecification" :
		case "v-ui:DatetimePropertySpecification" :
		case "v-ui:StringPropertySpecification" :
		case "v-ui:BooleanPropertySpecification" :
		case "v-ui:ObjectPropertySpecification" :
			if ( hasValue(doc, "v-ui:forClass") ) {
				doc["v-ui:forClass"].map( function ( i ) {
					var cls = {
						"@": i.data,
						"v-ui:hasSpecification": [{data: uri, type: _Uri}]
					}
					add_to_individual(ticket, cls, _event_id);
				});
			}
			break;
		// Process models
		case "v-s:ClassModel" :
			if ( hasValue(doc, "v-ui:forClass") ) {
				doc["v-ui:forClass"].map( function ( i ) {
					var cls = {
						"@": i.data,
						"v-ui:hasModel": [{data: uri, type: _Uri}]
					}
					add_to_individual(ticket, cls, _event_id);
				});
			}
			break;
		// Process templates
		case "v-ui:ClassTemplate" :
			if ( hasValue(doc, "v-ui:forClass") ) {
				doc["v-ui:forClass"].map( function ( i ) {
					var cls = {
						"@": i.data,
						"v-ui:hasTemplate": [{data: uri, type: _Uri}]
					}
					add_to_individual(ticket, cls, _event_id);
				});
			}
			break;
	}*/
""" ;
  rdfs:comment "Скрипт обработки индивидов онтологии"@ru ;
  rdfs:label "Event_4"@en ;
  rdfs:label "Событие_4"@ru ;
.

# -------------------------------------------------------------------------------------------------

v-a:VedaSystem
  rdf:type v-s:Person ;
  v-s:actualVersion v-a:VedaSystem ;
  v-s:birthday "2014-03-05"^^xsd:dateTime ;
  v-s:firstName "Veda"@en ;
  v-s:firstName "Веда"@ru ;
  v-s:hasAccount v-a:VedaSystemAccount ;
  v-s:lastName "System"@en ;
  v-s:lastName "Система"@ru ;
  rdfs:label "Veda System"@en ;
  rdfs:label "Система Веда"@ru ;
.

v-a:Permission_1
  rdf:type v-s:PermissionStatement ;
  v-s:canCreate "true"^^xsd:boolean ;
  v-s:canDelete "true"^^xsd:boolean ;
  v-s:canRead "true"^^xsd:boolean ;
  v-s:canUpdate "true"^^xsd:boolean ;
  v-s:permissionObject v-s:AllResourcesGroup ;
  v-s:permissionSubject v-a:VedaSystem ;
.