@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix v-s: <http://semantic-machines.com/veda/veda-schema/> .
@prefix v-ui: <http://semantic-machines.com/veda/veda-ui/> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix v-fc: <http://semantic-machines.com/veda/veda-function-create/> .
@prefix v-b: <http://semantic-machines.com/veda/veda-bundle/> .

<http://semantic-machines.com/veda/veda-function-create>
  rdf:type owl:Ontology ;
  rdfs:label "Veda system function 'Create' ontology"@en ;
  rdfs:label "Онтология функции 'Создать' системы Веда"@ru ;
  owl:imports <http://semantic-machines.com/veda/veda-schema> ;
  owl:imports <http://semantic-machines.com/veda/veda-ui> ;
  owl:imports rdf: ;
  owl:imports rdfs: ;
  owl:imports <http://www.w3.org/2002/07/owl> ;
#  owl:versionInfo "0.2" ;
.

########## CREATE FUNCTION ###########

v-fc:FunctionCreate
  rdf:type owl:Class ;
  rdfs:label "Function Create"@en ;
  rdfs:label "Функция Создать"@ru ;
  rdfs:subClassOf owl:Thing ;
.
v-fc:Blank
  rdf:type owl:Class ;
  rdfs:label "Бланк"@ru ;
  rdfs:label "Blank"@en ;
  rdfs:subClassOf owl:Thing ;
.
v-fc:BlankMgmt
  rdf:type v-b:Bundle ;
  rdfs:label "Запомнить"@ru ;
  rdfs:label "Remember"@en ;
.
v-fc:SavedBlanks
  rdf:type v-b:Bundle ;
  rdfs:label "Saved blanks"@en ;
  rdfs:label "Сохраненные бланки"@ru ;
.
v-fc:Create
  rdf:type v-fc:FunctionCreate ;
  rdfs:label "Create"@en ;
  rdfs:label "Создать"@ru ;
.
v-fc:ChooseType
  rdf:type v-b:Bundle ;
  rdfs:label "Choose a type to create"@en ;
  rdfs:label "Выберите тип объекта"@ru ;
.
v-fc:typeToCreate
  rdf:type owl:ObjectProperty ;
  rdfs:label "type"@en ;
  rdfs:label "тип"@ru ;
  rdfs:domain v-fc:Blank ;
  rdfs:range owl:Class ;
  rdfs:range rdfs:Class ;
.
v-fc:TypeToCreateSpec
  rdf:type v-ui:ObjectPropertySpecification ;
  rdfs:label "Спецификация свойства v-fc:typeToCreate"@ru ;
  rdfs:label "v-fc:typeToCreate property specification"@en ;
  v-ui:forClass v-fc:Blank, v-fc:FunctionCreate ;
  v-ui:forProperty v-fc:typeToCreate ;
  v-ui:tooltip "Ссылка на объект класса Класс."@ru ;
  v-ui:tooltip "Link to instance of Class class"@en ;
  v-ui:queryPrefix "('rdf:type'=='owl:Class'||'rdf:type'=='rdfs:Class')"^^xsd:string ;
  v-ui:maxCardinality "1"^^xsd:integer ;
  v-ui:minCardinality "1"^^xsd:integer ;
.
v-fc:LabelSpec
  rdf:type v-ui:StringPropertySpecification ;
  rdfs:label "Спецификация свойства rdfs:label для класса v-fc:Blank"@ru ;
  rdfs:label "rdfs:label property specification for class v-fc:Blank"@en ;
  v-ui:forClass v-fc:Blank ;
  v-ui:forProperty rdfs:label ;
  v-ui:tooltip "Обязательно. Строка произвольной длины."@ru ;
  v-ui:tooltip "Mandatory. Arbitrary length string."@en ;
  v-ui:maxCardinality "1"^^xsd:integer ;
  v-ui:minCardinality "1"^^xsd:integer ;
.
v-fc:FunctionCreateModel
  rdf:type v-s:ClassModel ;
  rdfs:label "v-fc:FunctionCreate class model"@en ;
  rdfs:label "Модель класса v-fc:FunctionCreate"@ru ;
  v-ui:forClass v-fc:FunctionCreate ;
  v-s:script """
var self = individual;
  """
.
v-fc:FunctionCreateTemplate
  rdf:type v-ui:ClassTemplate ;
  rdfs:label "v-fc:FunctionCreate class template"@en ;
  rdfs:label "Шаблон класса v-fc:FunctionCreate"@ru ;
  v-ui:forClass v-fc:FunctionCreate ;
  v-ui:template """
<div class="container-fluid">
	<h3 property="rdfs:label"></h3>
	<hr>	
	<div class="row">
		<div class="col-md-2 col-sm-3">
			<h4 about="v-fc:SavedBlanks" property="rdfs:label"></h4>
			<ol id="blanks"></ol>
		</div>
		<div class="col-md-10 col-sm-9" style="border-left: 1px solid gainsboro;">
			<h4 about="v-fc:ChooseType" property="rdfs:label"></h4>
			<veda-control rel="v-fc:typeToCreate" type="link" class="fulltext dropdown"></veda-control>
			<br>
			<div id="holder"></div>
		</div>
	</div>
</div>
<script>
	var self = individual;
	if (self.hasValue("v-fc:typeToCreate")) { modHandler("v-fc:typeToCreate", self["v-fc:typeToCreate"]) };
	self.on("individual:propertyModified", modHandler);
	function modHandler(property_uri, values) {
		if (property_uri === "v-fc:typeToCreate") {
			var holder = $("#holder", template).empty();
			if (values.length) {
				var blank = new veda.IndividualModel();
				blank["rdf:type"] = [ veda.ontology["v-fc:Blank"] ];
				blank["v-fc:typeToCreate"] = values;
				blank.present(holder, undefined, "edit");
			}
		}
	}
	template.one("remove", function () {
		self.off("individual:propertyModified", modHandler);
	});
	var blanksHolder = $("#blanks", template),
		asp = veda.user.aspect,
		blanks = asp["v-asp:hasBlank"];
	if (blanks) {
		blanks.map( function (blank) {
			var cont = $("<li>").appendTo(blanksHolder);
			blank.present(cont, veda.ontology["v-ui:LabelBlockLinkTemplate"]);
		});
	}
</script>
  """
.
v-fc:BlankTemplate
  rdf:type v-ui:ClassTemplate ;
  rdfs:label "v-fc:Blank class template"@en ;
  rdfs:label "Шаблон класса v-fc:Blank"@ru ;
  v-ui:forClass v-fc:Blank ;
  v-ui:template """
<div role="tabpanel">
	<br>
	<!-- Nav tabs -->
	<ul class="nav nav-tabs nav-right" role="tablist">
		<li class="pull-left"><h3 class="no-margin" about="@" property="rdfs:label"></h3></li>
		<li role="presentation"><a id="mgmt-pill" href="#mgmt" about="v-fc:BlankMgmt" property="rdfs:label" aria-controls="mgmt" role="tab" data-toggle="tab"></a></li>
		<li role="presentation" class="active"><a id="blank-pill" href="#blank" about="v-fc:Blank" property="rdfs:label" aria-controls="blank" role="tab" data-toggle="tab"></a></li>
	</ul>
	<br />
	<!-- Tab panes -->
	<div class="tab-content">
		<div role="tabpanel" class="tab-pane active" id="blank">
			<div id="object"></div>
		</div>
		<div role="tabpanel" class="tab-pane" id="mgmt">
			<em about="rdfs:label" property="rdfs:label"></em>
			<p property="rdfs:label" class="view -edit search"></p>
			<veda-control type="string" property="rdfs:label" class="-view edit search"></veda-control>
			<br>
			<div>
				<button type="button" class="action btn btn-primary view -edit" id="edit" about="v-b:Edit" property="rdfs:label"/>
				<button type="button" class="action btn btn-success -view edit" id="save" about="v-b:Save" property="rdfs:label"/>
				<button type="button" class="action btn btn-link view -edit" id="delete" about="v-b:Delete" property="rdfs:label"/>
			</div>
		</div>
	</div>
</div>
<script>
	var self = individual,
		holder = $("#object", template),
		object = new veda.IndividualModel(),
		asp = veda.user.aspect;
	object["rdf:type"] = self["v-fc:typeToCreate"];
	if ( self.isSync() ) {
		Object.getOwnPropertyNames(self.properties).map( function (property_uri) {
			if (property_uri === "rdf:type") return;
			if (property_uri === "rdfs:label") return;
			if (property_uri === "v-s:deleted") return;
			object.defineProperty(property_uri);
			object[property_uri] = self[property_uri].slice(0);
		});
	}
	object.present(holder, undefined, "edit");
	self.on("individual:beforeSave", updateBlank);	
	self.on("individual:afterSave", updateAspect);	
	template.one("remove", function () {
		self.off("individual:beforeSave", updateBlank);
		self.off("individual:afterSave", updateAspect);
	});
	function updateBlank() {
		Object.getOwnPropertyNames(object.properties).map( function (property_uri) {
			if (property_uri === "rdf:type") return;
			if (property_uri === "rdfs:label") return;
			if (property_uri === "v-s:deleted") return;
			self.defineProperty(property_uri);
			self[property_uri] = object[property_uri].slice(0);
		});
	}
	function updateAspect() {
		if (self["v-s:deleted"][0] == true) {
			asp["v-asp:hasBlank"] = asp["v-asp:hasBlank"].filter( function (i) { return i.id !== self.id;});
		} else if (
			!asp["v-asp:hasBlank"].filter( function (i) {return i.id === self.id;}).length
		) {
			asp["v-asp:hasBlank"] = asp["v-asp:hasBlank"].concat(self);
		}
		asp.save();
	}
</script>
  """
.
